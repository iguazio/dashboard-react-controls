{"version":3,"file":"FormInput.mjs","sources":["../../../src/lib/components/FormInput/FormInput.jsx"],"sourcesContent":["/*\nCopyright 2022 Iguazio Systems Ltd.\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useState, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { isEmpty, isNil } from 'lodash'\nimport { Field, useField } from 'react-final-form'\n\nimport InputNumberButtons from './InputNumberButtons/InputNumberButtons'\nimport OptionsMenu from '../../elements/OptionsMenu/OptionsMenu'\nimport ValidationTemplate from '../../elements/ValidationTemplate/ValidationTemplate'\nimport TextTooltipTemplate from '../../components/TooltipTemplate/TextTooltipTemplate'\nimport Tip from '../../components/Tip/Tip'\nimport Tooltip from '../../components/Tooltip/Tooltip'\n\nimport { INPUT_LINK, INPUT_VALIDATION_RULES } from '../../types'\nimport { checkPatternsValidity, checkPatternsValidityAsync } from '../../utils/validation.util'\nimport { useDetectOutsideClick, useDebounce } from '../../hooks'\nimport { validation as ValidationConstants } from '../../constants'\n\nimport ExclamationMarkIcon from '../../images/exclamation-mark.svg?react'\nimport Popout from '../../images/popout.svg?react'\nimport WarningIcon from '../../images/warning.svg?react'\n\nimport './formInput.scss'\n\nconst defaultProps = {\n  iconClick: () => {},\n  link: { show: '', value: '' },\n  onBlur: () => {},\n  onChange: () => {},\n  onKeyDown: () => {},\n  validator: () => {},\n  rules: []\n}\n\nconst FormInput = React.forwardRef(\n  (\n    {\n      async = false,\n      className = '',\n      customRequiredLabel = '',\n      density = 'normal',\n      disabled = false,\n      focused = false,\n      iconClass = '',\n      iconClick = defaultProps.iconClick,\n      inputIcon = null,\n      invalidText = 'This field is invalid',\n      label = '',\n      link = defaultProps.link,\n      name,\n      onBlur = defaultProps.onBlur,\n      onFocus,\n      onKeyDown = defaultProps.onKeyDown,\n      pattern = null,\n      required = false,\n      suggestionList = [],\n      step = '1',\n      tip = '',\n      type = 'text',\n      validationRules: rules = defaultProps.rules,\n      validator = defaultProps.validator,\n      withoutBorder = false,\n      ...inputProps\n    },\n    ref\n  ) => {\n    const { input, meta } = useField(name)\n    const [isInvalid, setIsInvalid] = useState(false)\n    const [isFocused, setIsFocused] = useState(false)\n    const [typedValue, setTypedValue] = useState('')\n    const [validationPattern] = useState(RegExp(pattern))\n    const [validationRules, setValidationRules] = useState(rules)\n    const [showValidationRules, setShowValidationRules] = useState(false)\n    const wrapperRef = useRef()\n    ref ??= wrapperRef\n    const inputRef = useRef()\n    const errorsRef = useRef()\n    const isRequiredRulePresentRef = useRef(false)\n    useDetectOutsideClick(ref, () => setShowValidationRules(false))\n    const debounceAsync = useDebounce()\n\n    const formFieldClassNames = classNames('form-field-input', className)\n\n    const inputWrapperClassNames = classNames(\n      'form-field__wrapper',\n      `form-field__wrapper-${density}`,\n      disabled && 'form-field__wrapper-disabled',\n      isInvalid && 'form-field__wrapper-invalid',\n      withoutBorder && 'without-border'\n    )\n    const labelClassNames = classNames(\n      'form-field__label',\n      disabled && 'form-field__label-disabled'\n    )\n\n    useEffect(() => {\n      setTypedValue(String(input.value)) // convert from number to string\n    }, [input.value])\n\n    useEffect(() => {\n      setIsInvalid(\n        errorsRef.current &&\n          meta.invalid &&\n          (meta.validating || meta.modified || (meta.submitFailed && meta.touched))\n      )\n    }, [meta.invalid, meta.modified, meta.submitFailed, meta.touched, meta.validating])\n\n    useEffect(() => {\n      if (!errorsRef.current) {\n        if (meta.valid && showValidationRules) {\n          setShowValidationRules(false)\n        }\n      }\n    }, [meta.valid, showValidationRules])\n\n    useEffect(() => {\n      if (showValidationRules) {\n        window.addEventListener('scroll', handleScroll, true)\n      }\n      return () => {\n        window.removeEventListener('scroll', handleScroll, true)\n      }\n    }, [showValidationRules])\n\n    useEffect(() => {\n      if (focused) {\n        inputRef.current.focus()\n      }\n    }, [focused])\n\n    useEffect(() => {\n      setValidationRules(() => {\n        isRequiredRulePresentRef.current = false\n\n        return rules.map(rule => {\n          if (rule.name === ValidationConstants.REQUIRED.NAME) {\n            isRequiredRulePresentRef.current = true\n          }\n\n          return {\n            ...rule,\n            isValid:\n              !errorsRef.current || !Array.isArray(errorsRef.current)\n                ? true\n                : !errorsRef.current.some(err => err.name === rule.name)\n          }\n        })\n      })\n    }, [rules])\n\n    const getValidationRules = () => {\n      return validationRules.map(({ isValid = false, label, name }) => {\n        return <ValidationTemplate valid={isValid} validationMessage={label} key={name} />\n      })\n    }\n\n    const isValueEmptyAndValid = value => {\n      return (!value && !required) || disabled\n    }\n\n    const handleInputBlur = event => {\n      input.onBlur && input.onBlur(event)\n\n      if (!event.relatedTarget || !event.relatedTarget?.closest('.form-field__suggestion-list')) {\n        setIsFocused(false)\n        onBlur && onBlur(event)\n      }\n    }\n    const handleInputFocus = event => {\n      input.onFocus && input.onFocus(event)\n      onFocus && onFocus(event)\n      setIsFocused(true)\n    }\n\n    const handleInputKeyDown = event => {\n      input.onKeyDown && input.onKeyDown(event)\n      onKeyDown && onKeyDown(event)\n    }\n\n    const handleScroll = event => {\n      if (inputRef.current && inputRef.current.contains(event.target)) return\n\n      if (\n        !event.target.closest('.options-menu') &&\n        !event.target.classList.contains('form-field-input')\n      ) {\n        setShowValidationRules(false)\n      }\n    }\n\n    const handleSuggestionClick = item => {\n      input.onChange && input.onChange(item)\n      setIsFocused(false)\n      onBlur()\n    }\n\n    const toggleValidationRulesMenu = () => {\n      inputRef.current.focus()\n      setShowValidationRules(state => !state)\n    }\n\n    const validateField = (value, allValues) => {\n      let valueToValidate = isNil(value) ? '' : String(value)\n\n      if (isValueEmptyAndValid(valueToValidate)) return\n\n      let validationError = null\n\n      if (required && valueToValidate.trim().length === 0 && !isRequiredRulePresentRef.current) {\n        validationError = {\n          name: 'required',\n          label: customRequiredLabel || 'This field is required'\n        }\n      } else if (!isEmpty(rules) && !async) {\n        const [newRules, isValidField] = checkPatternsValidity(rules, valueToValidate)\n        const invalidRules = newRules.filter(rule => !rule.isValid)\n\n        if (!isValidField) {\n          validationError = invalidRules.map(rule => ({ name: rule.name, label: rule.label }))\n        }\n      }\n\n      if (isEmpty(validationError)) {\n        if (type === 'number') {\n          if (inputProps.max && +valueToValidate > +inputProps.max) {\n            validationError = {\n              name: 'maxValue',\n              label: `The maximum value must be ${inputProps.max}`\n            }\n          }\n\n          if (inputProps.min && +valueToValidate < +inputProps.min) {\n            validationError = {\n              name: 'minValue',\n              label: `The minimum value must be ${inputProps.min}`\n            }\n          }\n        }\n        if (pattern && !validationPattern.test(valueToValidate)) {\n          validationError = { name: 'pattern', label: invalidText }\n        } else if (valueToValidate.startsWith(' ')) {\n          validationError = { name: 'empty', label: invalidText }\n        }\n      }\n\n      if (!validationError && validator) {\n        validationError = validator(value, allValues)\n      }\n\n      errorsRef.current = validationError\n\n      return validationError\n    }\n\n    const validateFieldAsync = debounceAsync(async (value, allValues) => {\n      let valueToValidate = isNil(value) ? '' : String(value)\n\n      if (isValueEmptyAndValid(valueToValidate)) return\n\n      let validationError = validateField(valueToValidate, allValues)\n\n      if (!isEmpty(rules)) {\n        const [newRules, isValidField] = await checkPatternsValidityAsync(rules, valueToValidate)\n\n        const invalidRules = newRules.filter(rule => !rule.isValid)\n\n        if (!isValidField) {\n          validationError = invalidRules.map(rule => ({ name: rule.name, label: rule.label }))\n        }\n      }\n\n      errorsRef.current = validationError\n\n      return validationError\n    }, 400)\n\n    const parseField = val => {\n      return type === 'number' && val ? parseFloat(val) || val : val\n    }\n\n    return (\n      <Field validate={async ? validateFieldAsync : validateField} name={name} parse={parseField}>\n        {({ input }) => {\n          return (\n            <div\n              ref={ref}\n              className={formFieldClassNames}\n              data-testid={name ? `${name}-form-field-input` : 'form-field-input'}\n            >\n              {label && (\n                <div className={labelClassNames}>\n                  <label\n                    data-testid={name ? `${name}-form-label` : 'form-label'}\n                    htmlFor={input.name}\n                  >\n                    {label}\n                    {(required || validationRules.find(rule => rule.name === 'required')) && (\n                      <span className=\"form-field__label-mandatory\"> *</span>\n                    )}\n                  </label>\n                  {link && link.show && typedValue.trim() && (\n                    <div className=\"form-field__label-icon\">\n                      <Tooltip template={<TextTooltipTemplate text={link.url || typedValue} />}>\n                        <a\n                          href={link.url || typedValue}\n                          onClick={event => event.stopPropagation()}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          <Popout />\n                        </a>\n                      </Tooltip>\n                    </div>\n                  )}\n                </div>\n              )}\n              <div className={inputWrapperClassNames}>\n                <div className=\"form-field__control\">\n                  <input\n                    data-testid={name ? `${name}-form-input` : 'form-input'}\n                    id={input.name}\n                    ref={inputRef}\n                    required={isInvalid || required}\n                    {...{\n                      disabled,\n                      pattern,\n                      type,\n                      ...inputProps,\n                      ...input\n                    }}\n                    autoComplete={inputProps.autocomplete ?? 'off'}\n                    onBlur={handleInputBlur}\n                    onKeyDown={handleInputKeyDown}\n                    onFocus={handleInputFocus}\n                  />\n                </div>\n                <div className=\"form-field__icons\">\n                  {isInvalid && !Array.isArray(errorsRef.current) && (\n                    <Tooltip\n                      className=\"form-field__warning\"\n                      template={\n                        <TextTooltipTemplate\n                          text={errorsRef.current?.label ?? invalidText}\n                          warning\n                        />\n                      }\n                    >\n                      <ExclamationMarkIcon />\n                    </Tooltip>\n                  )}\n                  {isInvalid && Array.isArray(errorsRef.current) && (\n                    <button className=\"form-field__warning\" onClick={toggleValidationRulesMenu}>\n                      <WarningIcon />\n                    </button>\n                  )}\n                  {tip && <Tip text={tip} className=\"form-field__tip\" />}\n                  {inputIcon && (\n                    <span data-testid=\"input-icon\" className={iconClass} onClick={iconClick}>\n                      {inputIcon}\n                    </span>\n                  )}\n                </div>\n                {type === 'number' && (\n                  <InputNumberButtons {...{ ...inputProps, step: +step, ...input, disabled }} />\n                )}\n              </div>\n              {suggestionList?.length > 0 && isFocused && (\n                <ul className=\"form-field__suggestion-list\">\n                  {suggestionList.map((item, index) => {\n                    return (\n                      <li\n                        className=\"suggestion-item\"\n                        key={`${item}${index}`}\n                        onClick={() => {\n                          handleSuggestionClick(item)\n                        }}\n                        tabIndex={index}\n                        dangerouslySetInnerHTML={{\n                          __html: item.replace(new RegExp(typedValue, 'gi'), match =>\n                            match ? `<b>${match}</b>` : match\n                          )\n                        }}\n                      />\n                    )\n                  })}\n                </ul>\n              )}\n              {!isEmpty(validationRules) && isInvalid && Array.isArray(errorsRef.current) && (\n                <OptionsMenu show={showValidationRules} ref={ref}>\n                  {getValidationRules()}\n                </OptionsMenu>\n              )}\n            </div>\n          )\n        }}\n      </Field>\n    )\n  }\n)\n\nFormInput.displayName = 'FormInput'\n\nFormInput.propTypes = {\n  async: PropTypes.bool,\n  className: PropTypes.string,\n  customRequiredLabel: PropTypes.string,\n  density: PropTypes.oneOf(['dense', 'normal', 'medium', 'chunky']),\n  disabled: PropTypes.bool,\n  focused: PropTypes.bool,\n  iconClass: PropTypes.string,\n  iconClick: PropTypes.func,\n  inputIcon: PropTypes.element,\n  invalidText: PropTypes.string,\n  label: PropTypes.string,\n  link: INPUT_LINK,\n  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  name: PropTypes.string.isRequired,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  pattern: PropTypes.string,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  suggestionList: PropTypes.arrayOf(PropTypes.string),\n  tip: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  type: PropTypes.string,\n  validationRules: INPUT_VALIDATION_RULES,\n  validator: PropTypes.func,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  withoutBorder: PropTypes.bool\n}\n\nexport default React.memo(FormInput)\n"],"names":["React","classNames","ValidationConstants","label","name","this","input","Popout","ExclamationMarkIcon","WarningIcon"],"mappings":"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"}