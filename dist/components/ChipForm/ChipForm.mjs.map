{"version":3,"file":"ChipForm.mjs","sources":["../../../src/lib/components/ChipForm/ChipForm.jsx"],"sourcesContent":["/*\nCopyright 2019 Iguazio Systems Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useState, useCallback, useEffect, useLayoutEffect, useMemo, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { isEmpty } from 'lodash'\n\nimport OptionsMenu from '../../elements/OptionsMenu/OptionsMenu'\nimport ValidationTemplate from '../../elements/ValidationTemplate/ValidationTemplate'\n\nimport { TAB, TAB_SHIFT } from '../../constants'\nimport { CHIP_OPTIONS } from '../../types'\n\nimport './chipForm.scss'\n\nlet ChipForm = (\n  {\n    checkValidation = null,\n    chipOptions,\n    className = '',\n    editConfig,\n    onChange,\n    setEditConfig,\n    validationRules = [],\n    value\n  },\n  ref\n) => {\n  const [chip, setChip] = useState({\n    ...value,\n    keyFieldWidth: 0,\n    valueFieldWidth: 0\n  })\n  const maxWidthInput = useMemo(() => {\n    return ref.current?.clientWidth - 50\n  }, [ref])\n  const { background, borderColor, density, font, borderRadius } = chipOptions\n  const minWidthInput = 25\n  const minWidthValueInput = 35\n\n  const refInputKey = useRef()\n  const refInputValue = useRef()\n  const refInputContainer = useRef()\n\n  const labelKeyClassName = classnames(\n    className,\n    !editConfig.isKeyFocused && 'item_edited',\n    !isEmpty(validationRules) && 'item_edited_invalid'\n  )\n  const labelContainerClassName = classnames(\n    'edit-chip-container',\n    background && `edit-chip-container-background_${background}`,\n    borderColor && `edit-chip-container-border_${borderColor}`,\n    font && `edit-chip-container-font_${font}`,\n    density && `edit-chip-container-density_${density}`,\n    borderRadius && `edit-chip-container-border_${borderRadius}`,\n    (editConfig.isEdit || editConfig.isNewChip) && 'edit-chip-container_edited'\n  )\n  const labelValueClassName = classnames(\n    'input-label-value',\n    !editConfig.isValueFocused && 'item_edited'\n  )\n\n  useLayoutEffect(() => {\n    if (!chip.keyFieldWidth && !chip.valueFieldWidth) {\n      const currentWidthKeyInput = refInputKey.current.scrollWidth + 1\n      const currentWidthValueInput = refInputValue.current.scrollWidth + 1\n\n      if (chip.key && chip.value) {\n        setChip(prevState => ({\n          ...prevState,\n          keyFieldWidth:\n            currentWidthKeyInput >= maxWidthInput ? maxWidthInput : currentWidthKeyInput,\n          valueFieldWidth:\n            currentWidthValueInput >= maxWidthInput ? maxWidthInput : currentWidthValueInput\n        }))\n      } else {\n        setChip(prevState => ({\n          ...prevState,\n          keyFieldWidth: minWidthInput,\n          valueFieldWidth: minWidthValueInput\n        }))\n      }\n    }\n  }, [\n    chip.key,\n    chip.keyFieldWidth,\n    chip.value,\n    chip.valueFieldWidth,\n    maxWidthInput,\n    refInputKey,\n    refInputValue\n  ])\n\n  useEffect(() => {\n    if (editConfig.isKeyFocused) {\n      refInputKey.current.focus()\n    } else if (editConfig.isValueFocused) {\n      refInputValue.current.focus()\n    }\n  }, [editConfig.isKeyFocused, editConfig.isValueFocused, refInputKey, refInputValue])\n\n  const outsideClick = useCallback(\n    event => {\n      event.stopPropagation()\n      const elementPath = event.path ?? event.composedPath?.()\n\n      if (!elementPath.includes(refInputContainer.current)) {\n        onChange(event, chip, 'Click')\n      }\n    },\n    [chip, onChange, refInputContainer]\n  )\n\n  useEffect(() => {\n    if (editConfig.isEdit) {\n      document.addEventListener('click', outsideClick, true)\n\n      return () => {\n        document.removeEventListener('click', outsideClick, true)\n      }\n    }\n  }, [outsideClick, editConfig.isEdit])\n\n  const focusChip = useCallback(\n    event => {\n      event.stopPropagation()\n\n      if (!event.shiftKey && event.key === TAB && editConfig.isValueFocused) {\n        onChange(event, chip, TAB)\n      } else if (event.shiftKey && event.key === TAB && editConfig.isKeyFocused) {\n        onChange(event, chip, TAB_SHIFT)\n      }\n\n      if (event.key === 'Backspace' || event.key === 'Delete') {\n        setChip(prevState => ({\n          ...prevState,\n          keyFieldWidth: editConfig.isKeyFocused ? minWidthInput : prevState.keyFieldWidth,\n          valueFieldWidth: editConfig.isValueFocused\n            ? minWidthValueInput\n            : prevState.valueFieldWidth\n        }))\n      }\n    },\n    [editConfig, onChange, chip]\n  )\n\n  const handleOnFocus = useCallback(\n    event => {\n      if (event.target.name === 'key') {\n        refInputKey.current.selectionStart = refInputKey.current.selectionEnd\n\n        setEditConfig(prevState => ({\n          ...prevState,\n          isKeyFocused: true,\n          isValueFocused: false\n        }))\n      } else {\n        refInputValue.current.selectionStart = refInputValue.current.selectionEnd\n\n        setEditConfig(prevState => ({\n          ...prevState,\n          isKeyFocused: false,\n          isValueFocused: true\n        }))\n      }\n    },\n    [refInputKey, refInputValue, setEditConfig]\n  )\n\n  const handleOnChange = useCallback(\n    event => {\n      event.preventDefault()\n\n      if (event.target.name === 'key') {\n        const currentWidthKeyInput = refInputKey.current.scrollWidth\n        checkValidation && checkValidation(refInputKey.current.value)\n\n        setChip(prevState => ({\n          ...prevState,\n          key: refInputKey.current.value,\n          keyFieldWidth:\n            refInputKey.current.value.length <= 1\n              ? minWidthInput\n              : currentWidthKeyInput >= maxWidthInput\n                ? maxWidthInput\n                : currentWidthKeyInput > minWidthInput\n                  ? currentWidthKeyInput + 2\n                  : minWidthInput\n        }))\n      } else {\n        const currentWidthValueInput = refInputValue.current.scrollWidth\n\n        setChip(prevState => ({\n          ...prevState,\n          value: refInputValue.current.value,\n          valueFieldWidth:\n            refInputValue.current.value.length <= 1\n              ? minWidthValueInput\n              : currentWidthValueInput >= maxWidthInput\n                ? maxWidthInput\n                : currentWidthValueInput > minWidthValueInput\n                  ? currentWidthValueInput + 2\n                  : minWidthValueInput\n        }))\n      }\n    },\n    [checkValidation, maxWidthInput, refInputKey, refInputValue]\n  )\n\n  const getValidationRules = useCallback(() => {\n    return validationRules.map(({ isValid = false, label, name }) => {\n      return <ValidationTemplate valid={isValid} validationMessage={label} key={name} />\n    })\n  }, [validationRules])\n\n  return (\n    <>\n      <div\n        ref={refInputContainer}\n        className={labelContainerClassName}\n        onKeyDown={event => editConfig.isEdit && focusChip(event)}\n      >\n        <input\n          autoComplete=\"off\"\n          className={labelKeyClassName}\n          name=\"key\"\n          style={{ width: chip.keyFieldWidth }}\n          onChange={handleOnChange}\n          onFocus={handleOnFocus}\n          placeholder=\"key\"\n          ref={refInputKey}\n          type=\"text\"\n          value={chip.key}\n        />\n        <div className=\"edit-chip-separator\">:</div>\n        <input\n          autoComplete=\"off\"\n          className={labelValueClassName}\n          name=\"value\"\n          onChange={handleOnChange}\n          onFocus={handleOnFocus}\n          placeholder=\"value\"\n          ref={refInputValue}\n          style={{ width: chip.valueFieldWidth }}\n          type=\"text\"\n          value={chip.value}\n        />\n      </div>\n      {validationRules.length > 0 && (\n        <OptionsMenu show={validationRules.length > 0} ref={{ refInputContainer }}>\n          {getValidationRules()}\n        </OptionsMenu>\n      )}\n    </>\n  )\n}\n\nChipForm = React.forwardRef(ChipForm)\n\nChipForm.displayName = 'ChipForm'\n\nChipForm.propTypes = {\n  checkValidation: PropTypes.func,\n  chipOptions: CHIP_OPTIONS.isRequired,\n  className: PropTypes.string,\n  editConfig: PropTypes.object.isRequired,\n  onChange: PropTypes.func.isRequired,\n  setEditConfig: PropTypes.func.isRequired,\n  validationRules: PropTypes.array,\n  value: PropTypes.object.isRequired\n}\n\nexport default ChipForm\n"],"names":["ChipForm","checkValidation","chipOptions","className","editConfig","onChange","setEditConfig","validationRules","value","ref","chip","setChip","useState","maxWidthInput","useMemo","_a","background","borderColor","density","font","borderRadius","minWidthInput","minWidthValueInput","refInputKey","useRef","refInputValue","refInputContainer","labelKeyClassName","classnames","isEmpty","labelContainerClassName","labelValueClassName","useLayoutEffect","currentWidthKeyInput","currentWidthValueInput","prevState","useEffect","outsideClick","useCallback","event","focusChip","TAB","TAB_SHIFT","handleOnFocus","handleOnChange","getValidationRules","isValid","label","name","ValidationTemplate","jsxs","Fragment","jsx","OptionsMenu","React","PropTypes","CHIP_OPTIONS","ChipForm$1"],"mappings":"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"}