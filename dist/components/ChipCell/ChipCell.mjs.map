{"version":3,"file":"ChipCell.mjs","sources":["../../../src/lib/components/ChipCell/ChipCell.jsx"],"sourcesContent":["/*\nCopyright 2019 Iguazio Systems Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useState, useCallback, useMemo } from 'react'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport Chip from '../Chip/Chip'\nimport ChipTooltip from './ChipTooltip/ChipTooltip'\nimport HiddenChipsBlock from './HiddenChipsBlock/HiddenChipsBlock'\n\nimport { CHIP_OPTIONS } from '../../types'\nimport { CLICK, TAB, TAB_SHIFT } from '../../constants'\nimport { cutChips } from '../../utils/chips.util'\nimport { isEveryObjectValueEmpty } from '../../utils/common.util'\nimport { useChipCell } from '../../hooks'\n\nimport Add from '../../images/add.svg'\n\nimport './chipCell.scss'\n\nconst ChipCell = ({\n  addChip = () => {},\n  chipOptions = {\n    background: 'purple',\n    boldValue: false,\n    borderRadius: 'primary',\n    borderColor: 'transparent',\n    density: 'dense',\n    font: 'purple'\n  },\n  className,\n  delimiter = null,\n  editChip = () => {},\n  elements = [],\n  isEditMode = false,\n  onClick = () => {},\n  removeChip = () => {},\n  shortChips = false,\n  setValidation = null,\n  visibleChipsMaxLength = null\n}) => {\n  const {\n    chipsCellRef,\n    chipsWrapperRef,\n    handleShowElements,\n    hiddenChipsCounterRef,\n    hiddenChipsPopUpRef,\n    setChipsSizes,\n    setShowHiddenChips,\n    showChips,\n    showHiddenChips,\n    visibleChipsCount\n  } = useChipCell(isEditMode, visibleChipsMaxLength)\n  const [editConfig, setEditConfig] = useState({\n    chipIndex: null,\n    isEdit: false,\n    isKeyFocused: true,\n    isValueFocused: false,\n    isNewChip: false\n  })\n\n  const buttonAddClassNames = classnames(\n    'button-add',\n    className,\n    chipOptions.background && `button-add-background_${chipOptions.background}`,\n    chipOptions.borderColor && `button-add-border_${chipOptions.borderColor}`,\n    chipOptions.font && `button-add-font_${chipOptions.font}`,\n    chipOptions.density && `button-add-density_${chipOptions.density}`\n  )\n  const wrapperClassNames = classnames('chips-wrapper', isEditMode && 'fixed-max-width')\n\n  let chips = useMemo(() => {\n    return (isEditMode && !visibleChipsMaxLength) || visibleChipsMaxLength === 'all'\n      ? {\n          visibleChips: elements.map(chip => ({\n            value: chip,\n            delimiter\n          }))\n        }\n      : cutChips(\n          elements,\n          visibleChipsMaxLength ? visibleChipsMaxLength : visibleChipsCount,\n          delimiter\n        )\n  }, [delimiter, elements, isEditMode, visibleChipsCount, visibleChipsMaxLength])\n\n  const handleAddNewChip = useCallback(\n    (event, chip) => {\n      event.preventDefault()\n\n      if (!editConfig.isEdit && !editConfig.chipIndex) {\n        addChip(chip, elements)\n      }\n\n      if (showHiddenChips) {\n        setShowHiddenChips(false)\n      }\n\n      setEditConfig({\n        chipIndex: elements.length,\n        isEdit: true,\n        isKeyFocused: true,\n        isValueFocused: false,\n        isNewChip: true\n      })\n    },\n    [\n      editConfig.isEdit,\n      editConfig.chipIndex,\n      showHiddenChips,\n      elements,\n      addChip,\n      setShowHiddenChips\n    ]\n  )\n\n  const handleRemoveChip = useCallback(\n    (event, chipIndex) => {\n      event.stopPropagation()\n\n      const newChips = elements.filter((value, index) => index !== chipIndex)\n\n      removeChip(newChips)\n    },\n    [elements, removeChip]\n  )\n\n  const handleEditChip = useCallback(\n    (event, chip, nameEvent) => {\n      event.preventDefault()\n      const isChipNotEmpty = !!(chip.key && chip.value && chip.key?.trim() && chip.value?.trim())\n\n      if (isChipNotEmpty) {\n        const newChips = [...elements]\n        newChips[editConfig.chipIndex] = `${chip.key}: ${chip.value}`\n\n        editChip(newChips)\n      }\n\n      if (nameEvent === CLICK) {\n        if (editConfig.isNewChip && !isChipNotEmpty) {\n          handleRemoveChip(event, editConfig.chipIndex)\n        }\n\n        setEditConfig({\n          chipIndex: null,\n          isEdit: false,\n          isKeyFocused: true,\n          isValueFocused: false,\n          isNewChip: false\n        })\n      } else if (nameEvent === TAB) {\n        if (editConfig.isNewChip && !isChipNotEmpty) {\n          handleRemoveChip(event, editConfig.chipIndex)\n        }\n\n        setEditConfig(prevState => {\n          const isNextChipIndexExists = prevState.chipIndex + 1 > elements.length - 1\n\n          return {\n            chipIndex: isNextChipIndexExists ? null : prevState.chipIndex + 1,\n            isEdit: !isNextChipIndexExists,\n            isKeyFocused: true,\n            isValueFocused: false,\n            isNewChip: false\n          }\n        })\n      } else if (nameEvent === TAB_SHIFT) {\n        if (editConfig.isNewChip && !isChipNotEmpty) {\n          handleRemoveChip(event, editConfig.chipIndex)\n        }\n\n        setEditConfig(prevState => {\n          const isPrevChipIndexExists = prevState.chipIndex - 1 < 0\n\n          return {\n            chipIndex: isPrevChipIndexExists ? null : prevState.chipIndex - 1,\n            isEdit: !isPrevChipIndexExists,\n            isKeyFocused: isPrevChipIndexExists,\n            isValueFocused: !isPrevChipIndexExists,\n            isNewChip: false\n          }\n        })\n      }\n    },\n    [elements, editConfig.chipIndex, editConfig.isNewChip, editChip, handleRemoveChip]\n  )\n\n  const handleIsEdit = useCallback(\n    (event, index) => {\n      if (isEditMode) {\n        event.stopPropagation()\n\n        setEditConfig({\n          chipIndex: index,\n          isEdit: true,\n          isKeyFocused: true,\n          isValueFocused: false\n        })\n      }\n\n      onClick && onClick()\n    },\n    [isEditMode, onClick]\n  )\n\n  return (\n    (isEditMode || !isEveryObjectValueEmpty(chips)) && (\n      <div className=\"chips-cell\" ref={chipsCellRef}>\n        <div className={wrapperClassNames} ref={chipsWrapperRef}>\n          {chips.visibleChips.map((chip, index) => {\n            return (\n              <div className=\"chip-block\" key={`${chip.value}${index}`}>\n                <ChipTooltip chip={chip} editConfig={editConfig} key={chip.value}>\n                  <Chip\n                    chip={chip}\n                    chipIndex={index}\n                    chipOptions={chipOptions}\n                    className={className}\n                    editConfig={editConfig}\n                    handleEditChip={handleEditChip}\n                    handleIsEdit={handleIsEdit}\n                    handleRemoveChip={handleRemoveChip}\n                    isEditMode={isEditMode}\n                    onClick={handleShowElements}\n                    ref={{ chipsCellRef, hiddenChipsCounterRef }}\n                    setChipsSizes={setChipsSizes}\n                    setEditConfig={setEditConfig}\n                    setValidation={setValidation}\n                    shortChip={shortChips}\n                    showChips={showChips}\n                    textOverflowEllipsis\n                  />\n                </ChipTooltip>\n                {chips.visibleChips.length - 1 === index && showHiddenChips && (\n                  <HiddenChipsBlock\n                    chipOptions={chipOptions}\n                    className={className}\n                    chips={chips.hiddenChips}\n                    chipIndex={index}\n                    editConfig={editConfig}\n                    handleEditChip={handleEditChip}\n                    handleIsEdit={handleIsEdit}\n                    handleRemoveChip={handleRemoveChip}\n                    handleShowElements={handleShowElements}\n                    isEditMode={isEditMode}\n                    setEditConfig={setEditConfig}\n                    setChipsSizes={setChipsSizes}\n                    ref={{ hiddenChipsCounterRef, hiddenChipsPopUpRef }}\n                  />\n                )}\n              </div>\n            )\n          })}\n          {isEditMode && (\n            <button className={buttonAddClassNames} onClick={e => handleAddNewChip(e, ':')}>\n              <Add />\n            </button>\n          )}\n        </div>\n      </div>\n    )\n  )\n}\n\nChipCell.propTypes = {\n  addChip: PropTypes.func,\n  chipOptions: CHIP_OPTIONS,\n  className: PropTypes.string,\n  delimiter: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  editChip: PropTypes.func,\n  elements: PropTypes.arrayOf(PropTypes.string),\n  isEditMode: PropTypes.bool,\n  onClick: PropTypes.func,\n  removeChip: PropTypes.func,\n  setValidation: PropTypes.func,\n  shortChips: PropTypes.bool,\n  visibleChipsMaxLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n}\n\nexport default React.memo(ChipCell)\n"],"names":["ChipCell","addChip","chipOptions","className","delimiter","editChip","elements","isEditMode","onClick","removeChip","shortChips","setValidation","visibleChipsMaxLength","chipsCellRef","chipsWrapperRef","handleShowElements","hiddenChipsCounterRef","hiddenChipsPopUpRef","setChipsSizes","setShowHiddenChips","showChips","showHiddenChips","visibleChipsCount","useChipCell","editConfig","setEditConfig","useState","buttonAddClassNames","classnames","wrapperClassNames","chips","useMemo","chip","cutChips","handleAddNewChip","useCallback","event","handleRemoveChip","chipIndex","newChips","value","index","handleEditChip","nameEvent","isChipNotEmpty","_a","_b","CLICK","TAB","prevState","isNextChipIndexExists","TAB_SHIFT","isPrevChipIndexExists","handleIsEdit","isEveryObjectValueEmpty","jsxs","jsx","ChipTooltip","Chip","HiddenChipsBlock","Add","PropTypes","CHIP_OPTIONS","ChipCell$1","React"],"mappings":"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"}