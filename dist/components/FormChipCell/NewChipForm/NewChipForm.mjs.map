{"version":3,"file":"NewChipForm.mjs","sources":["../../../../src/lib/components/FormChipCell/NewChipForm/NewChipForm.jsx"],"sourcesContent":["/*\nCopyright 2022 Iguazio Systems Ltd.\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useState, useCallback, useEffect, useLayoutEffect, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { isEmpty, get, isNil } from 'lodash'\n\nimport NewChipInput from '../NewChipInput/NewChipInput'\nimport OptionsMenu from '../../../elements/OptionsMenu/OptionsMenu'\nimport ValidationTemplate from '../../../elements/ValidationTemplate/ValidationTemplate'\n\nimport { CHIP_OPTIONS } from '../../../types'\nimport { CLICK, TAB, TAB_SHIFT } from '../../../constants'\nimport { getTextWidth } from '../formChipCell.util'\n\nimport Close from '../../../images/close.svg?react'\n\nimport './newChipForm.scss'\n\nconst defaultProps = {\n  rules: {}\n}\n\nconst NewChipForm = React.forwardRef(\n  (\n    {\n      chip,\n      chipIndex,\n      chipOptions,\n      className = '',\n      editConfig,\n      handleRemoveChip,\n      isEditable,\n      keyName,\n      meta,\n      onChange,\n      setEditConfig,\n      validationRules: rules = defaultProps.rules,\n      valueName\n    },\n    ref\n  ) => {\n    const [chipData, setChipData] = useState({\n      isKeyOnly: chip.isKeyOnly,\n      key: chip.key,\n      value: chip.value,\n      keyFieldWidth: 0,\n      valueFieldWidth: 0\n    })\n    const [selectedInput, setSelectedInput] = useState('key')\n    const [validationRules, setValidationRules] = useState(rules)\n    const [showValidationRules, setShowValidationRules] = useState(false)\n\n    const maxWidthInput = useMemo(() => {\n      return ref.current?.clientWidth - 50\n    }, [ref])\n    const { background, borderColor, borderRadius, density, font } = chipOptions\n    const minWidthInput = useMemo(() => {\n      return isEditable ? 25 : 20\n    }, [isEditable])\n    const minWidthValueInput = useMemo(() => {\n      return isEditable ? 35 : 20\n    }, [isEditable])\n\n    const refInputKey = React.useRef({})\n    const refInputValue = React.useRef({})\n    const refInputContainer = React.useRef()\n\n    const labelKeyClassName = classnames(\n      className,\n      !editConfig.isKeyFocused && 'item_edited',\n      !isEmpty(get(meta, ['error', chipIndex, 'key'], [])) &&\n        !isEmpty(chipData.key) &&\n        !chip.disabled &&\n        'item_edited_invalid'\n    )\n    const labelContainerClassName = classnames(\n      'edit-chip-container',\n      background && `edit-chip-container-background_${background}`,\n      borderColor && `edit-chip-container-border_${borderColor}`,\n      font && `edit-chip-container-font_${font}`,\n      density && `edit-chip-container-density_${density}`,\n      borderRadius && `edit-chip-container-border_${borderRadius}`,\n      (editConfig.isEdit || editConfig.isNewChip) && 'edit-chip-container_edited',\n      chip.disabled && 'edit-chip-container_disabled edit-chip-container-font_disabled'\n    )\n    const labelValueClassName = classnames(\n      'input-label-value',\n      !editConfig.isValueFocused && 'item_edited',\n      !isEmpty(get(meta, ['error', chipIndex, 'value'], [])) &&\n        !isEmpty(chipData.value) &&\n        'item_edited_invalid'\n    )\n\n    const closeButtonClass = classnames(\n      'item-icon-close',\n      !chip.disabled &&\n        editConfig.chipIndex === chipIndex &&\n        isEditable &&\n        'item-icon-close_invisible',\n      !isEditable && 'item-icon-close_hidden'\n    )\n\n    useLayoutEffect(() => {\n      if (!chipData.keyFieldWidth && !chipData.valueFieldWidth) {\n        const currentWidthKeyInput = refInputKey.current.scrollWidth + 1\n        const currentWidthValueInput = refInputValue.current.scrollWidth + 1\n\n        const keyFieldWidth =\n          !chipData.key || currentWidthKeyInput <= minWidthInput\n            ? minWidthInput\n            : currentWidthKeyInput >= maxWidthInput\n              ? maxWidthInput\n              : currentWidthKeyInput\n        const valueFieldWidth =\n          !chipData.value || currentWidthValueInput <= minWidthValueInput\n            ? minWidthValueInput\n            : currentWidthValueInput >= maxWidthInput\n              ? maxWidthInput\n              : currentWidthValueInput\n\n        setChipData(prevState => ({\n          ...prevState,\n          keyFieldWidth,\n          valueFieldWidth\n        }))\n      }\n    }, [\n      minWidthInput,\n      minWidthValueInput,\n      chipData.key,\n      chipData.value,\n      chipData.keyFieldWidth,\n      chipData.valueFieldWidth,\n      maxWidthInput,\n      refInputKey,\n      refInputValue\n    ])\n\n    const handleScroll = () => {\n      setShowValidationRules(false)\n    }\n\n    useEffect(() => {\n      if (showValidationRules) {\n        window.addEventListener('scroll', handleScroll, true)\n      }\n      return () => {\n        window.removeEventListener('scroll', handleScroll, true)\n      }\n    }, [showValidationRules])\n\n    useEffect(() => {\n      if (editConfig.chipIndex === chipIndex) {\n        if (editConfig.isKeyFocused) {\n          refInputKey.current.focus()\n        } else if (editConfig.isValueFocused) {\n          refInputValue.current.focus()\n        }\n      }\n    }, [\n      editConfig.isKeyFocused,\n      editConfig.isValueFocused,\n      refInputKey,\n      refInputValue,\n      chipIndex,\n      editConfig.chipIndex\n    ])\n\n    const outsideClick = useCallback(\n      event => {\n        if (editConfig.chipIndex === chipIndex) {\n          const elementPath = event.path ?? event.composedPath?.()\n\n          if (!elementPath.includes(refInputContainer.current)) {\n            onChange(event, CLICK, true)\n            window.getSelection().removeAllRanges()\n          } else {\n            event.stopPropagation()\n          }\n        }\n      },\n      [onChange, refInputContainer, chipIndex, editConfig.chipIndex]\n    )\n\n    useEffect(() => {\n      if (editConfig.isEdit) {\n        document.addEventListener('click', outsideClick, true)\n\n        return () => {\n          document.removeEventListener('click', outsideClick, true)\n        }\n      }\n    }, [outsideClick, editConfig.isEdit])\n\n    const focusChip = useCallback(\n      event => {\n        if (editConfig.chipIndex === chipIndex && isEditable) {\n          if (!event.shiftKey && event.key === TAB && editConfig.isValueFocused) {\n            return onChange(event, TAB)\n          } else if (event.shiftKey && event.key === TAB && editConfig.isKeyFocused) {\n            return onChange(event, TAB_SHIFT)\n          }\n        }\n        event.stopPropagation()\n      },\n      [editConfig, onChange, chipIndex, isEditable]\n    )\n\n    const handleOnFocus = useCallback(\n      event => {\n        const isKeyFocused = event.target.name === keyName\n\n        if (editConfig.chipIndex === chipIndex) {\n          if (isKeyFocused) {\n            refInputKey.current.selectionStart = refInputKey.current.selectionEnd\n\n            setEditConfig(prevConfig => ({\n              ...prevConfig,\n              isKeyFocused: true,\n              isValueFocused: false\n            }))\n          } else {\n            refInputValue.current.selectionStart = refInputValue.current.selectionEnd\n\n            setEditConfig(prevConfig => ({\n              ...prevConfig,\n              isKeyFocused: false,\n              isValueFocused: true\n            }))\n          }\n\n          event && event.stopPropagation()\n        } else if (isNil(editConfig.chipIndex)) {\n          if (isKeyFocused) {\n            refInputKey.current.selectionStart = refInputKey.current.selectionEnd\n          } else {\n            refInputValue.current.selectionStart = refInputValue.current.selectionEnd\n          }\n          setEditConfig({\n            chipIndex,\n            isEdit: true,\n            isKeyFocused: isKeyFocused,\n            isValueFocused: !isKeyFocused\n          })\n        }\n      },\n      [keyName, refInputKey, refInputValue, setEditConfig, editConfig.chipIndex, chipIndex]\n    )\n\n    const handleOnChange = useCallback(\n      event => {\n        event.preventDefault()\n        if (event.target.name === keyName) {\n          const currentWidthKeyInput = getTextWidth(refInputKey.current)\n\n          setChipData(prevState => ({\n            ...prevState,\n            key: refInputKey.current.value,\n            keyFieldWidth:\n              refInputKey.current.value.length <= 1\n                ? minWidthInput\n                : currentWidthKeyInput >= maxWidthInput\n                  ? maxWidthInput\n                  : currentWidthKeyInput > minWidthInput\n                    ? currentWidthKeyInput + 2\n                    : minWidthInput\n          }))\n        } else {\n          const currentWidthValueInput = getTextWidth(refInputValue.current)\n\n          setChipData(prevState => ({\n            ...prevState,\n            value: refInputValue.current.value,\n            valueFieldWidth:\n              refInputValue.current.value?.length <= 1\n                ? minWidthValueInput\n                : currentWidthValueInput >= maxWidthInput\n                  ? maxWidthInput\n                  : currentWidthValueInput > minWidthValueInput\n                    ? currentWidthValueInput + 2\n                    : minWidthValueInput\n          }))\n        }\n      },\n      [keyName, minWidthInput, maxWidthInput, minWidthValueInput]\n    )\n\n    useLayoutEffect(() => {\n      if (editConfig.chipIndex === chipIndex) {\n        setSelectedInput(\n          editConfig.isKeyFocused ? 'key' : editConfig.isValueFocused ? 'value' : null\n        )\n      }\n    }, [editConfig.isKeyFocused, editConfig.isValueFocused, editConfig.chipIndex, chipIndex])\n\n    useEffect(() => {\n      if (meta.valid && showValidationRules) {\n        setShowValidationRules(false)\n      }\n    }, [meta.valid, showValidationRules])\n\n    useEffect(() => {\n      if (meta.error) {\n        setValidationRules(prevState => {\n          return {\n            ...prevState,\n            [selectedInput]: prevState[selectedInput]?.map(rule => {\n              return {\n                ...rule,\n                isValid: isEmpty(get(meta, ['error', editConfig.chipIndex, selectedInput], []))\n                  ? true\n                  : !meta.error[editConfig.chipIndex][selectedInput].some(\n                      err => err && err.name === rule.name\n                    )\n              }\n            })\n          }\n        })\n\n        !showValidationRules && setShowValidationRules(true)\n      }\n    }, [meta, showValidationRules, selectedInput, editConfig.chipIndex])\n\n    const getValidationRules = useCallback(() => {\n      return validationRules[selectedInput]?.map(({ isValid = false, label, name }) => {\n        return <ValidationTemplate valid={isValid} validationMessage={label} key={name} />\n      })\n    }, [selectedInput, validationRules])\n\n    return (\n      <div\n        className={labelContainerClassName}\n        onKeyDown={event => !chip.disabled && editConfig.isEdit && focusChip(event)}\n        ref={refInputContainer}\n      >\n        <NewChipInput\n          className={labelKeyClassName}\n          disabled={\n            chip.disabled ||\n            !isEditable ||\n            (!isNil(editConfig.chipIndex) && editConfig.chipIndex !== chipIndex)\n          }\n          name={keyName}\n          onChange={handleOnChange}\n          onFocus={handleOnFocus}\n          placeholder=\"key\"\n          ref={refInputKey}\n          style={{ width: chipData.keyFieldWidth }}\n        />\n        {!chipData.isKeyOnly && <div className=\"edit-chip-separator\">:</div>}\n        {!chipData.isKeyOnly && (\n          <NewChipInput\n            className={labelValueClassName}\n            disabled={\n              chip.disabled ||\n              !isEditable ||\n              (!isNil(editConfig.chipIndex) && editConfig.chipIndex !== chipIndex)\n            }\n            name={valueName}\n            onChange={handleOnChange}\n            onFocus={handleOnFocus}\n            placeholder=\"value\"\n            ref={refInputValue}\n            style={{ width: chipData.valueFieldWidth }}\n          />\n        )}\n\n        <button\n          disabled={chip.disabled}\n          className={closeButtonClass}\n          onClick={event => !chip.disabled && handleRemoveChip(event, chipIndex)}\n        >\n          <Close />\n        </button>\n\n        {!chip.disabled &&\n          (editConfig.isKeyFocused ? !isEmpty(chipData.key) : !isEmpty(chipData.value)) &&\n          editConfig.chipIndex === chipIndex &&\n          !isEmpty(get(meta, ['error', editConfig.chipIndex, selectedInput], [])) && (\n            <OptionsMenu show={showValidationRules} ref={refInputContainer}>\n              {getValidationRules()}\n            </OptionsMenu>\n          )}\n      </div>\n    )\n  }\n)\n\nNewChipForm.displayName = 'NewChipForm'\n\nNewChipForm.propTypes = {\n  chip: PropTypes.object.isRequired,\n  chipIndex: PropTypes.number.isRequired,\n  chipOptions: CHIP_OPTIONS.isRequired,\n  className: PropTypes.string,\n  editConfig: PropTypes.object.isRequired,\n  handleRemoveChip: PropTypes.func.isRequired,\n  isEditable: PropTypes.bool.isRequired,\n  keyName: PropTypes.string.isRequired,\n  meta: PropTypes.object.isRequired,\n  onChange: PropTypes.func.isRequired,\n  setEditConfig: PropTypes.func.isRequired,\n  validationRules: PropTypes.object,\n  valueName: PropTypes.string.isRequired\n}\n\nexport default NewChipForm\n"],"names":["React","this","Close"],"mappings":";;;;;;;;;;;;;AAiCA,MAAM,eAAe;AAAA,EACnB,OAAO,CAAA;AACT;AAEA,MAAM,cAAcA,eAAM;AAAA,EACxB,CACE;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,iBAAiB,QAAQ,aAAa;AAAA,IACtC;AAAA,KAEF,QACG;AACH,UAAM,CAAC,UAAU,WAAW,IAAI,SAAS;AAAA,MACvC,WAAW,KAAK;AAAA,MAChB,KAAK,KAAK;AAAA,MACV,OAAO,KAAK;AAAA,MACZ,eAAe;AAAA,MACf,iBAAiB;AAAA,IAAA,CAClB;AACD,UAAM,CAAC,eAAe,gBAAgB,IAAI,SAAS,KAAK;AACxD,UAAM,CAAC,iBAAiB,kBAAkB,IAAI,SAAS,KAAK;AAC5D,UAAM,CAAC,qBAAqB,sBAAsB,IAAI,SAAS,KAAK;AAE9D,UAAA,gBAAgB,QAAQ,MAAM;;AAC3B,eAAA,SAAI,YAAJ,mBAAa,eAAc;AAAA,IAAA,GACjC,CAAC,GAAG,CAAC;AACR,UAAM,EAAE,YAAY,aAAa,cAAc,SAAS,SAAS;AAC3D,UAAA,gBAAgB,QAAQ,MAAM;AAClC,aAAO,aAAa,KAAK;AAAA,IAAA,GACxB,CAAC,UAAU,CAAC;AACT,UAAA,qBAAqB,QAAQ,MAAM;AACvC,aAAO,aAAa,KAAK;AAAA,IAAA,GACxB,CAAC,UAAU,CAAC;AAEf,UAAM,cAAcA,eAAM,OAAO,EAAE;AACnC,UAAM,gBAAgBA,eAAM,OAAO,EAAE;AAC/B,UAAA,oBAAoBA,eAAM,OAAO;AAEvC,UAAM,oBAAoB;AAAA,MACxB;AAAA,MACA,CAAC,WAAW,gBAAgB;AAAA,MAC5B,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS,WAAW,KAAK,GAAG,CAAE,CAAA,CAAC,KACjD,CAAC,QAAQ,SAAS,GAAG,KACrB,CAAC,KAAK,YACN;AAAA,IACJ;AACA,UAAM,0BAA0B;AAAA,MAC9B;AAAA,MACA,cAAc,kCAAkC,UAAU;AAAA,MAC1D,eAAe,8BAA8B,WAAW;AAAA,MACxD,QAAQ,4BAA4B,IAAI;AAAA,MACxC,WAAW,+BAA+B,OAAO;AAAA,MACjD,gBAAgB,8BAA8B,YAAY;AAAA,OACzD,WAAW,UAAU,WAAW,cAAc;AAAA,MAC/C,KAAK,YAAY;AAAA,IACnB;AACA,UAAM,sBAAsB;AAAA,MAC1B;AAAA,MACA,CAAC,WAAW,kBAAkB;AAAA,MAC9B,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS,WAAW,OAAO,GAAG,CAAA,CAAE,CAAC,KACnD,CAAC,QAAQ,SAAS,KAAK,KACvB;AAAA,IACJ;AAEA,UAAM,mBAAmB;AAAA,MACvB;AAAA,MACA,CAAC,KAAK,YACJ,WAAW,cAAc,aACzB,cACA;AAAA,MACF,CAAC,cAAc;AAAA,IACjB;AAEA,oBAAgB,MAAM;AACpB,UAAI,CAAC,SAAS,iBAAiB,CAAC,SAAS,iBAAiB;AAClD,cAAA,uBAAuB,YAAY,QAAQ,cAAc;AACzD,cAAA,yBAAyB,cAAc,QAAQ,cAAc;AAE7D,cAAA,gBACJ,CAAC,SAAS,OAAO,wBAAwB,gBACrC,gBACA,wBAAwB,gBACtB,gBACA;AACF,cAAA,kBACJ,CAAC,SAAS,SAAS,0BAA0B,qBACzC,qBACA,0BAA0B,gBACxB,gBACA;AAER,oBAAY,CAAc,eAAA;AAAA,UACxB,GAAG;AAAA,UACH;AAAA,UACA;AAAA,QAAA,EACA;AAAA,MAAA;AAAA,IACJ,GACC;AAAA,MACD;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAED,UAAM,eAAe,MAAM;AACzB,6BAAuB,KAAK;AAAA,IAC9B;AAEA,cAAU,MAAM;AACd,UAAI,qBAAqB;AAChB,eAAA,iBAAiB,UAAU,cAAc,IAAI;AAAA,MAAA;AAEtD,aAAO,MAAM;AACJ,eAAA,oBAAoB,UAAU,cAAc,IAAI;AAAA,MACzD;AAAA,IAAA,GACC,CAAC,mBAAmB,CAAC;AAExB,cAAU,MAAM;AACV,UAAA,WAAW,cAAc,WAAW;AACtC,YAAI,WAAW,cAAc;AAC3B,sBAAY,QAAQ,MAAM;AAAA,QAAA,WACjB,WAAW,gBAAgB;AACpC,wBAAc,QAAQ,MAAM;AAAA,QAAA;AAAA,MAC9B;AAAA,IACF,GACC;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAW;AAAA,IAAA,CACZ;AAED,UAAM,eAAe;AAAA,MACnB,CAAS,UAAA;;AACH,YAAA,WAAW,cAAc,WAAW;AACtC,gBAAM,cAAc,MAAM,UAAQ,WAAM,iBAAN;AAElC,cAAI,CAAC,YAAY,SAAS,kBAAkB,OAAO,GAAG;AAC3C,qBAAA,OAAO,OAAO,IAAI;AACpB,mBAAA,eAAe,gBAAgB;AAAA,UAAA,OACjC;AACL,kBAAM,gBAAgB;AAAA,UAAA;AAAA,QACxB;AAAA,MAEJ;AAAA,MACA,CAAC,UAAU,mBAAmB,WAAW,WAAW,SAAS;AAAA,IAC/D;AAEA,cAAU,MAAM;AACd,UAAI,WAAW,QAAQ;AACZ,iBAAA,iBAAiB,SAAS,cAAc,IAAI;AAErD,eAAO,MAAM;AACF,mBAAA,oBAAoB,SAAS,cAAc,IAAI;AAAA,QAC1D;AAAA,MAAA;AAAA,IAED,GAAA,CAAC,cAAc,WAAW,MAAM,CAAC;AAEpC,UAAM,YAAY;AAAA,MAChB,CAAS,UAAA;AACH,YAAA,WAAW,cAAc,aAAa,YAAY;AACpD,cAAI,CAAC,MAAM,YAAY,MAAM,QAAQ,OAAO,WAAW,gBAAgB;AAC9D,mBAAA,SAAS,OAAO,GAAG;AAAA,UAAA,WACjB,MAAM,YAAY,MAAM,QAAQ,OAAO,WAAW,cAAc;AAClE,mBAAA,SAAS,OAAO,SAAS;AAAA,UAAA;AAAA,QAClC;AAEF,cAAM,gBAAgB;AAAA,MACxB;AAAA,MACA,CAAC,YAAY,UAAU,WAAW,UAAU;AAAA,IAC9C;AAEA,UAAM,gBAAgB;AAAA,MACpB,CAAS,UAAA;AACD,cAAA,eAAe,MAAM,OAAO,SAAS;AAEvC,YAAA,WAAW,cAAc,WAAW;AACtC,cAAI,cAAc;AACJ,wBAAA,QAAQ,iBAAiB,YAAY,QAAQ;AAEzD,0BAAc,CAAe,gBAAA;AAAA,cAC3B,GAAG;AAAA,cACH,cAAc;AAAA,cACd,gBAAgB;AAAA,YAAA,EAChB;AAAA,UAAA,OACG;AACS,0BAAA,QAAQ,iBAAiB,cAAc,QAAQ;AAE7D,0BAAc,CAAe,gBAAA;AAAA,cAC3B,GAAG;AAAA,cACH,cAAc;AAAA,cACd,gBAAgB;AAAA,YAAA,EAChB;AAAA,UAAA;AAGJ,mBAAS,MAAM,gBAAgB;AAAA,QACtB,WAAA,MAAM,WAAW,SAAS,GAAG;AACtC,cAAI,cAAc;AACJ,wBAAA,QAAQ,iBAAiB,YAAY,QAAQ;AAAA,UAAA,OACpD;AACS,0BAAA,QAAQ,iBAAiB,cAAc,QAAQ;AAAA,UAAA;AAEjD,wBAAA;AAAA,YACZ;AAAA,YACA,QAAQ;AAAA,YACR;AAAA,YACA,gBAAgB,CAAC;AAAA,UAAA,CAClB;AAAA,QAAA;AAAA,MAEL;AAAA,MACA,CAAC,SAAS,aAAa,eAAe,eAAe,WAAW,WAAW,SAAS;AAAA,IACtF;AAEA,UAAM,iBAAiB;AAAA,MACrB,CAAS,UAAA;AACP,cAAM,eAAe;AACjB,YAAA,MAAM,OAAO,SAAS,SAAS;AAC3B,gBAAA,uBAAuB,aAAa,YAAY,OAAO;AAE7D,sBAAY,CAAc,eAAA;AAAA,YACxB,GAAG;AAAA,YACH,KAAK,YAAY,QAAQ;AAAA,YACzB,eACE,YAAY,QAAQ,MAAM,UAAU,IAChC,gBACA,wBAAwB,gBACtB,gBACA,uBAAuB,gBACrB,uBAAuB,IACvB;AAAA,UAAA,EACV;AAAA,QAAA,OACG;AACC,gBAAA,yBAAyB,aAAa,cAAc,OAAO;AAEjE,sBAAY,CAAc,cAAA;;AAAA;AAAA,cACxB,GAAG;AAAA,cACH,OAAO,cAAc,QAAQ;AAAA,cAC7B,mBACE,mBAAc,QAAQ,UAAtB,mBAA6B,WAAU,IACnC,qBACA,0BAA0B,gBACxB,gBACA,yBAAyB,qBACvB,yBAAyB,IACzB;AAAA,YAAA;AAAA,WACV;AAAA,QAAA;AAAA,MAEN;AAAA,MACA,CAAC,SAAS,eAAe,eAAe,kBAAkB;AAAA,IAC5D;AAEA,oBAAgB,MAAM;AAChB,UAAA,WAAW,cAAc,WAAW;AACtC;AAAA,UACE,WAAW,eAAe,QAAQ,WAAW,iBAAiB,UAAU;AAAA,QAC1E;AAAA,MAAA;AAAA,IACF,GACC,CAAC,WAAW,cAAc,WAAW,gBAAgB,WAAW,WAAW,SAAS,CAAC;AAExF,cAAU,MAAM;AACV,UAAA,KAAK,SAAS,qBAAqB;AACrC,+BAAuB,KAAK;AAAA,MAAA;AAAA,IAE7B,GAAA,CAAC,KAAK,OAAO,mBAAmB,CAAC;AAEpC,cAAU,MAAM;AACd,UAAI,KAAK,OAAO;AACd,2BAAmB,CAAa,cAAA;;AACvB,iBAAA;AAAA,YACL,GAAG;AAAA,YACH,CAAC,aAAa,IAAG,eAAU,aAAa,MAAvB,mBAA0B,IAAI,CAAQ,SAAA;AAC9C,qBAAA;AAAA,gBACL,GAAG;AAAA,gBACH,SAAS,QAAQ,IAAI,MAAM,CAAC,SAAS,WAAW,WAAW,aAAa,GAAG,CAAE,CAAA,CAAC,IAC1E,OACA,CAAC,KAAK,MAAM,WAAW,SAAS,EAAE,aAAa,EAAE;AAAA,kBAC/C,CAAO,QAAA,OAAO,IAAI,SAAS,KAAK;AAAA,gBAAA;AAAA,cAExC;AAAA,YACD;AAAA,UACH;AAAA,QAAA,CACD;AAEA,SAAA,uBAAuB,uBAAuB,IAAI;AAAA,MAAA;AAAA,IACrD,GACC,CAAC,MAAM,qBAAqB,eAAe,WAAW,SAAS,CAAC;AAE7D,UAAA,qBAAqB,YAAY,MAAM;;AACpC,cAAA,qBAAgB,aAAa,MAA7B,mBAAgC,IAAI,CAAC,EAAE,UAAU,OAAO,OAAO,WAAW;AAC/E,sCAAQ,oBAAmB,EAAA,OAAO,SAAS,mBAAmB,SAAY,MAAnE,OAAA;AAAA,UAAA,UAAA;AAAA,UAAA,YAAA;AAAA,UAAA,cAAA;AAAA,QAAyE,GAAAC,MAAA;AAAA,MAAA;AAAA,IACjF,GACA,CAAC,eAAe,eAAe,CAAC;AAGjC,WAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,WAAW;AAAA,QACX,WAAW,WAAS,CAAC,KAAK,YAAY,WAAW,UAAU,UAAU,KAAK;AAAA,QAC1E,KAAK;AAAA,QAEL,UAAA;AAAA,UAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,WAAW;AAAA,cACX,UACE,KAAK,YACL,CAAC,cACA,CAAC,MAAM,WAAW,SAAS,KAAK,WAAW,cAAc;AAAA,cAE5D,MAAM;AAAA,cACN,UAAU;AAAA,cACV,SAAS;AAAA,cACT,aAAY;AAAA,cACZ,KAAK;AAAA,cACL,OAAO,EAAE,OAAO,SAAS,cAAc;AAAA,YAAA;AAAA,YAZzC;AAAA,YAAA;AAAA,YAAA;AAAA,cAAA,UAAA;AAAA,cAAA,YAAA;AAAA,cAAA,cAAA;AAAA,YAAA;AAAA,YAAAA;AAAAA,UAaA;AAAA,UACC,CAAC,SAAS,oCAAc,OAAI,EAAA,WAAU,uBAAsB,UAArC,IAAA,GAAA,QAAA,OAAA;AAAA,YAAA,UAAA;AAAA,YAAA,YAAA;AAAA,YAAA,cAAA;AAAA,UAAsC,GAAAA,MAAA;AAAA,UAC7D,CAAC,SAAS,aACT;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,WAAW;AAAA,cACX,UACE,KAAK,YACL,CAAC,cACA,CAAC,MAAM,WAAW,SAAS,KAAK,WAAW,cAAc;AAAA,cAE5D,MAAM;AAAA,cACN,UAAU;AAAA,cACV,SAAS;AAAA,cACT,aAAY;AAAA,cACZ,KAAK;AAAA,cACL,OAAO,EAAE,OAAO,SAAS,gBAAgB;AAAA,YAAA;AAAA,YAZ3C;AAAA,YAAA;AAAA,YAAA;AAAA,cAAA,UAAA;AAAA,cAAA,YAAA;AAAA,cAAA,cAAA;AAAA,YAAA;AAAA,YAAAA;AAAAA,UAaA;AAAA,UAGF;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,UAAU,KAAK;AAAA,cACf,WAAW;AAAA,cACX,SAAS,CAAS,UAAA,CAAC,KAAK,YAAY,iBAAiB,OAAO,SAAS;AAAA,cAErE,iCAACC,UAAD,CAAA,GAAA,QAAA,OAAA;AAAA,gBAAA,UAAA;AAAA,gBAAA,YAAA;AAAA,gBAAA,cAAA;AAAA,cAAA,GAAOD,MAAA;AAAA,YAAA;AAAA,YALT;AAAA,YAAA;AAAA,YAAA;AAAA,cAAA,UAAA;AAAA,cAAA,YAAA;AAAA,cAAA,cAAA;AAAA,YAAA;AAAA,YAAAA;AAAAA,UAMA;AAAA,UAEC,CAAC,KAAK,aACJ,WAAW,eAAe,CAAC,QAAQ,SAAS,GAAG,IAAI,CAAC,QAAQ,SAAS,KAAK,MAC3E,WAAW,cAAc,aACzB,CAAC,QAAQ,IAAI,MAAM,CAAC,SAAS,WAAW,WAAW,aAAa,GAAG,CAAA,CAAE,CAAC,4BACnE,aAAY,EAAA,MAAM,qBAAqB,KAAK,mBAC1C,kCADH,QAAA,OAAA;AAAA,YAAA,UAAA;AAAA,YAAA,YAAA;AAAA,YAAA,cAAA;AAAA,UAAA,GAEAA,MAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MAnDN;AAAA,MAAA;AAAA,MAAA;AAAA,QAAA,UAAA;AAAA,QAAA,YAAA;AAAA,QAAA,cAAA;AAAA,MAAA;AAAA,MAAAA;AAAAA,IAqDA;AAAA,EAAA;AAGN;AAEA,YAAY,cAAc;AAE1B,YAAY,YAAY;AAAA,EACtB,MAAM,UAAU,OAAO;AAAA,EACvB,WAAW,UAAU,OAAO;AAAA,EAC5B,aAAa,aAAa;AAAA,EAC1B,WAAW,UAAU;AAAA,EACrB,YAAY,UAAU,OAAO;AAAA,EAC7B,kBAAkB,UAAU,KAAK;AAAA,EACjC,YAAY,UAAU,KAAK;AAAA,EAC3B,SAAS,UAAU,OAAO;AAAA,EAC1B,MAAM,UAAU,OAAO;AAAA,EACvB,UAAU,UAAU,KAAK;AAAA,EACzB,eAAe,UAAU,KAAK;AAAA,EAC9B,iBAAiB,UAAU;AAAA,EAC3B,WAAW,UAAU,OAAO;AAC9B;"}