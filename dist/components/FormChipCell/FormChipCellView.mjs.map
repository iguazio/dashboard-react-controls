{"version":3,"file":"FormChipCellView.mjs","sources":["../../../src/lib/components/FormChipCell/FormChipCellView.jsx"],"sourcesContent":["/*\nCopyright 2022 Iguazio Systems Ltd.\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { FieldArray } from 'react-final-form-arrays'\nimport { isEmpty } from 'lodash'\n\nimport FormChip from './FormChip/FormChip'\nimport HiddenChipsBlock from './HiddenChipsBlock/HiddenChipsBlock'\nimport TextTooltipTemplate from '../TooltipTemplate/TextTooltipTemplate'\nimport Tooltip from '../Tooltip/Tooltip'\n\nimport { CHIP_OPTIONS } from '../../types'\nimport { isEveryObjectValueEmpty } from '../../utils/common.util'\nimport { uniquenessError } from './formChipCell.util'\n\nimport Add from '../../images/add.svg?react'\n\nlet FormChipCellView = (\n  {\n    chipOptions = {\n      background: 'purple',\n      boldValue: false,\n      borderRadius: 'primary',\n      borderColor: 'transparent',\n      density: 'dense',\n      font: 'purple'\n    },\n    chipSizeIsRecalculated,\n    setChipSizeIsRecalculated,\n    chips,\n    editConfig,\n    handleAddNewChip,\n    handleEditChip,\n    handleRemoveChip,\n    handleShowElements,\n    handleToEditMode,\n    isEditable = false,\n    name,\n    setChipsSizes,\n    setEditConfig,\n    shortChips = false,\n    showChips,\n    showHiddenChips,\n    validateFields,\n    validationRules = {}\n  },\n  { chipsCellRef, chipsWrapperRef, hiddenChipsCounterRef, hiddenChipsPopUpRef }\n) => {\n  const buttonAddClassNames = classnames(\n    'button-add',\n    chipOptions.background && `button-add-background_${chipOptions.background}`,\n    chipOptions.borderColor && `button-add-border_${chipOptions.borderColor}`,\n    chipOptions.font && `button-add-font_${chipOptions.font}`,\n    chipOptions.density && `button-add-density_${chipOptions.density}`\n  )\n  const wrapperClassNames = classnames(\n    'chips-wrapper',\n    isEditable && 'fixed-max-width',\n    !chipSizeIsRecalculated && 'chip_invisible'\n  )\n  const chipClassNames = classnames(\n    'chip',\n    'chip__content',\n    isEditable && 'data-ellipsis',\n    shortChips && 'chip_short',\n    chips.hiddenChips && 'chip_hidden',\n    chipOptions.density && `chip-density_${chipOptions.density}`,\n    chipOptions.borderRadius && `chip-border_${chipOptions.borderRadius}`,\n    chipOptions.background && `chip-background_${chipOptions.background}`,\n    chipOptions.borderColor && `chip-border_${chipOptions.borderColor}`,\n    chipOptions.font && `chip-font_${chipOptions.font}`,\n    isEditable && 'editable',\n    (showChips || isEditable) && 'chip_visible'\n  )\n\n  return (\n    <FieldArray name={name} validate={validateFields}>\n      {({ fields, meta }) => {\n        let newValidationRules = { ...validationRules }\n\n        if (\n          !isEmpty(validationRules) &&\n          validationRules.key.every(rule => rule.name !== uniquenessError.name)\n        ) {\n          newValidationRules = {\n            ...validationRules,\n            key: [...validationRules.key, uniquenessError]\n          }\n        }\n\n        return (\n          (isEditable || !isEveryObjectValueEmpty(fields)) && (\n            <div className=\"chips-cell\" ref={chipsCellRef}>\n              <div className={wrapperClassNames} ref={chipsWrapperRef}>\n                {fields.map((contentItem, index) => {\n                  const chipData = fields.value[index]\n\n                  return (\n                    index < chips.visibleChips?.length && (\n                      <div className=\"chip-block\" key={chipData.id}>\n                        <Tooltip\n                          hidden={editConfig.isEdit && !chipData.tooltip}\n                          key={chipData.id}\n                          template={\n                            <TextTooltipTemplate\n                              text={\n                                chipData.tooltip || (\n                                  <span className=\"chip__content\">\n                                    <span className=\"chip__content-item\">{chipData.key}</span>\n                                    {!chipData.isKeyOnly && (\n                                      <>\n                                        <span className=\"chip__delimiter\">\n                                          {chipData.delimiter ? chipData.delimiter : ':'}\n                                        </span>\n                                        <span className=\"chip__content-item\">{chipData.value}</span>\n                                      </>\n                                    )}\n                                  </span>\n                                )\n                              }\n                            />\n                          }\n                        >\n                          <FormChip\n                            chip={chipData}\n                            chipSizeIsRecalculated={chipSizeIsRecalculated}\n                            setChipSizeIsRecalculated={setChipSizeIsRecalculated}\n                            chipIndex={index}\n                            chipOptions={chipOptions}\n                            editConfig={editConfig}\n                            handleEditChip={(event, nameEvent, isOutsideClick) =>\n                              handleEditChip(event, fields, nameEvent, isOutsideClick)\n                            }\n                            handleRemoveChip={(event, index) =>\n                              handleRemoveChip(event, fields, index)\n                            }\n                            handleToEditMode={handleToEditMode}\n                            isEditable={isEditable}\n                            keyName={`${contentItem}.key`}\n                            meta={meta}\n                            ref={chipsCellRef}\n                            setChipsSizes={setChipsSizes}\n                            setEditConfig={setEditConfig}\n                            validationRules={newValidationRules}\n                            valueName={`${contentItem}.value`}\n                          />\n                        </Tooltip>\n                      </div>\n                    )\n                  )\n                })}\n\n                <div className=\"chip-block\">\n                  {chips.hiddenChips.length > 0 && showHiddenChips && (\n                    <HiddenChipsBlock\n                      chipClassNames={chipClassNames}\n                      chipOptions={chipOptions}\n                      chips={chips.hiddenChips}\n                      handleShowElements={handleShowElements}\n                      ref={{ hiddenChipsCounterRef, hiddenChipsPopUpRef }}\n                      textOverflowEllipsis\n                    />\n                  )}\n                  {chips.hiddenChipsNumber && (\n                    <span\n                      ref={hiddenChipsCounterRef}\n                      className={`${chipClassNames} chips_button`}\n                      onClick={handleShowElements}\n                    >\n                      {chips.hiddenChipsNumber}\n                    </span>\n                  )}\n                </div>\n\n                {isEditable && (\n                  <button\n                    data-testid={`${name}-add-chip`}\n                    className={buttonAddClassNames}\n                    onClick={e => handleAddNewChip(e, fields)}\n                  >\n                    <Add />\n                  </button>\n                )}\n              </div>\n            </div>\n          )\n        )\n      }}\n    </FieldArray>\n  )\n}\n\nFormChipCellView = forwardRef(FormChipCellView)\n\nFormChipCellView.displayName = 'FormChipCellView'\n\nFormChipCellView.propTypes = {\n  chipOptions: CHIP_OPTIONS,\n  chipSizeIsRecalculated: PropTypes.bool.isRequired,\n  setChipSizeIsRecalculated: PropTypes.func.isRequired,\n  chips: PropTypes.object.isRequired,\n  editConfig: PropTypes.object.isRequired,\n  formState: PropTypes.object.isRequired,\n  handleAddNewChip: PropTypes.func.isRequired,\n  handleEditChip: PropTypes.func.isRequired,\n  handleRemoveChip: PropTypes.func.isRequired,\n  handleShowElements: PropTypes.func.isRequired,\n  handleToEditMode: PropTypes.func.isRequired,\n  isEditable: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  setChipsSizes: PropTypes.func.isRequired,\n  setEditConfig: PropTypes.func.isRequired,\n  shortChips: PropTypes.bool,\n  showChips: PropTypes.bool.isRequired,\n  showHiddenChips: PropTypes.bool.isRequired,\n  validateFields: PropTypes.func.isRequired,\n  validationRules: PropTypes.object\n}\n\nexport default FormChipCellView\n"],"names":["FormChipCellView","chipOptions","chipSizeIsRecalculated","setChipSizeIsRecalculated","chips","editConfig","handleAddNewChip","handleEditChip","handleRemoveChip","handleShowElements","handleToEditMode","isEditable","name","setChipsSizes","setEditConfig","shortChips","showChips","showHiddenChips","validateFields","validationRules","chipsCellRef","chipsWrapperRef","hiddenChipsCounterRef","hiddenChipsPopUpRef","buttonAddClassNames","classnames","wrapperClassNames","chipClassNames","jsx","FieldArray","fields","meta","newValidationRules","isEmpty","rule","uniquenessError","isEveryObjectValueEmpty","jsxs","contentItem","index","chipData","_a","Tooltip","TextTooltipTemplate","Fragment","FormChip","event","nameEvent","isOutsideClick","HiddenChipsBlock","e","Add","forwardRef","CHIP_OPTIONS","PropTypes","FormChipCellView$1"],"mappings":"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"}