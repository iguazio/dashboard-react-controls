{"version":3,"file":"FormChipCellView.mjs","sources":["../../../src/lib/components/FormChipCell/FormChipCellView.jsx"],"sourcesContent":["/*\nCopyright 2022 Iguazio Systems Ltd.\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { FieldArray } from 'react-final-form-arrays'\nimport { isEmpty } from 'lodash'\n\nimport FormChip from './FormChip/FormChip'\nimport HiddenChipsBlock from './HiddenChipsBlock/HiddenChipsBlock'\nimport TextTooltipTemplate from '../TooltipTemplate/TextTooltipTemplate'\nimport Tooltip from '../Tooltip/Tooltip'\n\nimport { CHIP_OPTIONS } from '../../types'\nimport { isEveryObjectValueEmpty } from '../../utils/common.util'\nimport { uniquenessError } from './formChipCell.util'\n\nimport Add from '../../images/add.svg?react'\n\nconst FormChipCellView = React.forwardRef(\n  (\n    {\n      chipOptions = {\n        background: 'purple',\n        boldValue: false,\n        borderRadius: 'primary',\n        borderColor: 'transparent',\n        density: 'dense',\n        font: 'purple'\n      },\n      chips,\n      editConfig,\n      handleAddNewChip,\n      handleEditChip,\n      handleRemoveChip,\n      handleShowElements,\n      handleToEditMode,\n      isEditable = false,\n      name,\n      setChipsSizes,\n      setEditConfig,\n      shortChips = false,\n      showChips,\n      showHiddenChips,\n      validateFields,\n      validationRules = {}\n    },\n    { chipsCellRef, chipsWrapperRef, hiddenChipsCounterRef, hiddenChipsPopUpRef }\n  ) => {\n    const buttonAddClassNames = classnames(\n      'button-add',\n      chipOptions.background && `button-add-background_${chipOptions.background}`,\n      chipOptions.borderColor && `button-add-border_${chipOptions.borderColor}`,\n      chipOptions.font && `button-add-font_${chipOptions.font}`,\n      chipOptions.density && `button-add-density_${chipOptions.density}`\n    )\n    const wrapperClassNames = classnames('chips-wrapper', isEditable && 'fixed-max-width')\n    const chipClassNames = classnames(\n      'chip',\n      'chip__content',\n      isEditable && 'data-ellipsis',\n      shortChips && 'chip_short',\n      chips.hiddenChips && 'chip_hidden',\n      chipOptions.density && `chip-density_${chipOptions.density}`,\n      chipOptions.borderRadius && `chip-border_${chipOptions.borderRadius}`,\n      chipOptions.background && `chip-background_${chipOptions.background}`,\n      chipOptions.borderColor && `chip-border_${chipOptions.borderColor}`,\n      chipOptions.font && `chip-font_${chipOptions.font}`,\n      isEditable && 'editable',\n      (showChips || isEditable) && 'chip_visible'\n    )\n\n    return (\n      <FieldArray name={name} validate={validateFields}>\n        {({ fields, meta }) => {\n          if (\n            !isEmpty(validationRules) &&\n            validationRules.key.every(rule => rule.name !== uniquenessError.name)\n          ) {\n            validationRules.key.push(uniquenessError)\n          }\n\n          return (\n            (isEditable || !isEveryObjectValueEmpty(fields)) && (\n              <div className=\"chips-cell\" ref={chipsCellRef}>\n                <div className={wrapperClassNames} ref={chipsWrapperRef}>\n                  {fields.map((contentItem, index) => {\n                    const chipData = fields.value[index]\n\n                    return (\n                      index < chips.visibleChips?.length && (\n                        <div className=\"chip-block\" key={chipData.id}>\n                          <Tooltip\n                            hidden={editConfig.isEdit && !chipData.tooltip}\n                            key={chipData.id}\n                            template={\n                              <TextTooltipTemplate\n                                text={\n                                  chipData.tooltip || (\n                                    <span className=\"chip__content\">\n                                      <span className=\"chip__content-item\">{chipData.key}</span>\n                                      {!chipData.isKeyOnly && (\n                                        <>\n                                          <span className=\"chip__delimiter\">\n                                            {chipData.delimiter ? chipData.delimiter : ':'}\n                                          </span>\n                                          <span className=\"chip__content-item\">\n                                            {chipData.value}\n                                          </span>\n                                        </>\n                                      )}\n                                    </span>\n                                  )\n                                }\n                              />\n                            }\n                          >\n                            <FormChip\n                              chip={chipData}\n                              chipIndex={index}\n                              chipOptions={chipOptions}\n                              editConfig={editConfig}\n                              handleEditChip={(event, nameEvent, isOutsideClick) =>\n                                handleEditChip(event, fields, nameEvent, isOutsideClick)\n                              }\n                              handleRemoveChip={(event, index) =>\n                                handleRemoveChip(event, fields, index)\n                              }\n                              handleToEditMode={handleToEditMode}\n                              isEditable={isEditable}\n                              keyName={`${contentItem}.key`}\n                              meta={meta}\n                              ref={chipsCellRef}\n                              setChipsSizes={setChipsSizes}\n                              setEditConfig={setEditConfig}\n                              validationRules={validationRules}\n                              valueName={`${contentItem}.value`}\n                            />\n                          </Tooltip>\n                        </div>\n                      )\n                    )\n                  })}\n\n                  <div className=\"chip-block\">\n                    {chips.hiddenChips.length > 0 && showHiddenChips && (\n                      <HiddenChipsBlock\n                        chipClassNames={chipClassNames}\n                        chipOptions={chipOptions}\n                        chips={chips.hiddenChips}\n                        handleShowElements={handleShowElements}\n                        ref={{ hiddenChipsCounterRef, hiddenChipsPopUpRef }}\n                        textOverflowEllipsis\n                      />\n                    )}\n                    {chips.hiddenChipsNumber && (\n                      <span\n                        ref={hiddenChipsCounterRef}\n                        className={`${chipClassNames} chips_button`}\n                        onClick={handleShowElements}\n                      >\n                        {chips.hiddenChipsNumber}\n                      </span>\n                    )}\n                  </div>\n\n                  {isEditable && (\n                    <button\n                      data-testid={`${name}-add-chip`}\n                      className={buttonAddClassNames}\n                      onClick={e => handleAddNewChip(e, fields)}\n                    >\n                      <Add />\n                    </button>\n                  )}\n                </div>\n              </div>\n            )\n          )\n        }}\n      </FieldArray>\n    )\n  }\n)\n\nFormChipCellView.displayName = 'FormChipCellView'\n\nFormChipCellView.propTypes = {\n  chipOptions: CHIP_OPTIONS,\n  chips: PropTypes.object.isRequired,\n  editConfig: PropTypes.object.isRequired,\n  handleAddNewChip: PropTypes.func.isRequired,\n  handleEditChip: PropTypes.func.isRequired,\n  handleRemoveChip: PropTypes.func.isRequired,\n  handleShowElements: PropTypes.func.isRequired,\n  handleToEditMode: PropTypes.func.isRequired,\n  isEditable: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  setChipsSizes: PropTypes.func.isRequired,\n  setEditConfig: PropTypes.func.isRequired,\n  shortChips: PropTypes.bool,\n  showChips: PropTypes.bool.isRequired,\n  showHiddenChips: PropTypes.bool.isRequired,\n  validateFields: PropTypes.func.isRequired,\n  validationRules: PropTypes.object\n}\n\nexport default FormChipCellView\n"],"names":["React","this","index","Add"],"mappings":"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"}