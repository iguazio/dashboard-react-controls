{"version":3,"file":"FormChipCell.mjs","sources":["../../../src/lib/components/FormChipCell/FormChipCell.jsx"],"sourcesContent":["/*\nCopyright 2022 Iguazio Systems Ltd.\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useState, useCallback, useMemo } from 'react'\nimport lodash, { get, isEmpty, set, isNil } from 'lodash'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport FormChipCellView from './FormChipCellView'\n\nimport { CHIP_OPTIONS } from '../../types'\nimport { CLICK, TAB, TAB_SHIFT } from '../../constants'\nimport { areArraysEqual } from '../../utils/common.util'\nimport { checkPatternsValidity } from '../../utils/validation.util'\nimport { generateChipsList } from '../../utils/generateChipsList.util'\nimport { uniquenessError } from './formChipCell.util'\nimport { useChipCell } from '../../hooks'\n\nimport './formChipCell.scss'\n\nlet FormChipCell = ({\n  chipOptions = {\n    background: 'purple',\n    boldValue: false,\n    borderRadius: 'primary',\n    borderColor: 'transparent',\n    density: 'dense',\n    font: 'purple'\n  },\n  className = '',\n  delimiter = null,\n  formState,\n  initialValues,\n  isEditable = false,\n  label = null,\n  name,\n  onClick = () => {},\n  shortChips = false,\n  validationRules = {},\n  validator = null,\n  onExitEditModeCallback = null,\n  visibleChipsMaxLength = null\n}) => {\n  const chipsClassName = classnames('chips', className)\n  const {\n    chipsCellRef,\n    chipsWrapperRef,\n    handleShowElements,\n    hiddenChipsCounterRef,\n    hiddenChipsPopUpRef,\n    setChipsSizes,\n    setShowHiddenChips,\n    showChips,\n    showHiddenChips,\n    visibleChipsCount\n  } = useChipCell(isEditable, visibleChipsMaxLength)\n\n  const [editConfig, setEditConfig] = useState({\n    chipIndex: null,\n    isEdit: false,\n    isKeyFocused: false,\n    isValueFocused: false,\n    isNewChip: false\n  })\n\n  let chips = useMemo(() => {\n    return isEditable || visibleChipsMaxLength === 'all'\n      ? {\n          visibleChips: get(formState.values, name),\n          hiddenChips: []\n        }\n      : generateChipsList(\n          get(formState.values, name),\n          visibleChipsMaxLength ? visibleChipsMaxLength : visibleChipsCount\n        )\n  }, [visibleChipsMaxLength, isEditable, visibleChipsCount, formState.values, name])\n\n  const checkChipsList = useCallback(\n    currentChipsList => {\n      if (areArraysEqual(get(initialValues, name), currentChipsList, ['id'])) {\n        set(formState.initialValues, name, currentChipsList)\n      }\n\n      formState.form.mutators.setFieldState(name, { modified: true })\n      formState.form.mutators.setFieldState(name, { touched: true })\n    },\n    [initialValues, name, formState]\n  )\n\n  const handleAddNewChip = useCallback(\n    (event, fields) => {\n      const fieldsLength = fields.value?.length || 0\n\n      if (!editConfig.isEdit && !editConfig.chipIndex) {\n        formState.form.mutators.push(name, {\n          id: fieldsLength + new Date(),\n          key: '',\n          value: '',\n          delimiter: delimiter\n        })\n      }\n\n      if (showHiddenChips) {\n        setShowHiddenChips(false)\n      }\n\n      setEditConfig({\n        chipIndex: fieldsLength,\n        isEdit: true,\n        isKeyFocused: true,\n        isValueFocused: false,\n        isNewChip: true\n      })\n\n      event && event.preventDefault()\n    },\n    [\n      editConfig.isEdit,\n      editConfig.chipIndex,\n      showHiddenChips,\n      formState.form.mutators,\n      name,\n      delimiter,\n      setShowHiddenChips\n    ]\n  )\n\n  const handleRemoveChip = useCallback(\n    (event, fields, chipIndex, isOutsideClick = false) => {\n      checkChipsList(\n        lodash\n          .chain(formState)\n          .get(['values', name])\n          .filter((_, index) => index !== chipIndex)\n          .value()\n      )\n      fields.remove(chipIndex)\n      onExitEditModeCallback && onExitEditModeCallback()\n      event && !isOutsideClick && event.stopPropagation()\n    },\n    [checkChipsList, formState, name, onExitEditModeCallback]\n  )\n\n  const handleEditChip = useCallback(\n    (event, fields, nameEvent, isOutsideClick) => {\n      const { key, value } = fields.value[editConfig.chipIndex]\n      const isChipNotEmpty = !!(key?.trim() && value?.trim())\n\n      if (nameEvent === CLICK) {\n        if (!isChipNotEmpty) {\n          handleRemoveChip(event, fields, editConfig.chipIndex, isOutsideClick)\n        }\n\n        setEditConfig({\n          chipIndex: null,\n          isEdit: false,\n          isKeyFocused: false,\n          isValueFocused: false,\n          isNewChip: false\n        })\n        isChipNotEmpty && onExitEditModeCallback && onExitEditModeCallback()\n      } else if (nameEvent === TAB) {\n        if (!isChipNotEmpty) {\n          handleRemoveChip(event, fields, editConfig.chipIndex)\n        }\n\n        setEditConfig(prevState => {\n          const lastChipSelected = prevState.chipIndex + 1 > fields.value.length - 1\n\n          isChipNotEmpty && lastChipSelected && onExitEditModeCallback && onExitEditModeCallback()\n\n          return {\n            chipIndex: lastChipSelected ? null : prevState.chipIndex + 1,\n            isEdit: !lastChipSelected,\n            isKeyFocused: !lastChipSelected,\n            isValueFocused: false,\n            isNewChip: false\n          }\n        })\n      } else if (nameEvent === TAB_SHIFT) {\n        if (!isChipNotEmpty) {\n          handleRemoveChip(event, fields, editConfig.chipIndex)\n        }\n\n        setEditConfig(prevState => {\n          const firstChipIsSelected = prevState.chipIndex === 0\n\n          isChipNotEmpty &&\n            firstChipIsSelected &&\n            onExitEditModeCallback &&\n            onExitEditModeCallback()\n\n          return {\n            chipIndex: firstChipIsSelected ? null : prevState.chipIndex - 1,\n            isEdit: !firstChipIsSelected,\n            isKeyFocused: false,\n            isValueFocused: !firstChipIsSelected,\n            isNewChip: false\n          }\n        })\n      }\n\n      checkChipsList(get(formState.values, name))\n\n      if (\n        (editConfig.chipIndex > 0 && editConfig.chipIndex < fields.value.length - 1) ||\n        (fields.value.length > 1 && editConfig.chipIndex === 0 && nameEvent !== TAB_SHIFT) ||\n        (fields.value.length > 1 &&\n          editConfig.chipIndex === fields.value.length - 1 &&\n          nameEvent !== TAB)\n      ) {\n        event && event.preventDefault()\n      }\n    },\n    [\n      editConfig.chipIndex,\n      checkChipsList,\n      formState.values,\n      name,\n      onExitEditModeCallback,\n      handleRemoveChip\n    ]\n  )\n\n  const handleToEditMode = useCallback(\n    (event, chipIndex, keyName) => {\n      if (isEditable) {\n        const { clientX: pointerCoordinateX, clientY: pointerCoordinateY } = event\n        let isKeyClicked = false\n        const isClickedInsideInputElement = (\n          pointerCoordinateX,\n          pointerCoordinateY,\n          inputElement\n        ) => {\n          if (inputElement) {\n            const {\n              top: topPosition,\n              left: leftPosition,\n              right: rightPosition,\n              bottom: bottomPosition\n            } = inputElement.getBoundingClientRect()\n            if (pointerCoordinateX > rightPosition || pointerCoordinateX < leftPosition)\n              return false\n            if (pointerCoordinateY > bottomPosition || pointerCoordinateY < topPosition)\n              return false\n\n            return true\n          }\n        }\n        event.stopPropagation()\n\n        if (event.target.nodeName !== 'INPUT') {\n          if (event.target.firstElementChild) {\n            isKeyClicked = isClickedInsideInputElement(\n              pointerCoordinateX,\n              pointerCoordinateY,\n              event.target.firstElementChild\n            )\n          }\n        } else {\n          isKeyClicked = event.target.name === keyName\n        }\n\n        setEditConfig(preState => ({\n          ...preState,\n          chipIndex,\n          isEdit: true,\n          isKeyFocused: isKeyClicked,\n          isValueFocused: !isKeyClicked\n        }))\n      }\n\n      onClick && onClick()\n    },\n    [isEditable, onClick]\n  )\n\n  const validateFields = fieldsArray => {\n    if (!fieldsArray) return null\n\n    let errorData = []\n\n    const uniquenessValidator = (newValue, idx) => {\n      return !fieldsArray.some(({ key }, index) => {\n        return newValue === key && index !== idx\n      })\n    }\n\n    if (!isEmpty(validationRules)) {\n      errorData = fieldsArray.map(chip => {\n        const [keyValidation, valueValidation] = validateChip(chip)\n\n        if (keyValidation && valueValidation) return { key: keyValidation, value: valueValidation }\n\n        if (keyValidation) return { key: keyValidation }\n\n        if (valueValidation) return { value: valueValidation }\n\n        return null\n      })\n    }\n\n    // uniqueness\n    fieldsArray.forEach((chip, index) => {\n      const isUnique = uniquenessValidator(chip.key, index)\n\n      if (!isUnique) {\n        if (get(errorData, [index, 'key'], false)) {\n          errorData.at(index).key.push(uniquenessError)\n        } else {\n          set(errorData, [index, 'key'], [uniquenessError])\n        }\n      }\n    })\n\n    if (isEmpty(errorData) && validator) {\n      errorData = validator(fieldsArray)\n    }\n\n    if (errorData.every(label => isNil(label))) {\n      return null\n    }\n\n    return errorData\n  }\n\n  const validateChip = ({ key, value, disabled }) => {\n    const validateField = (value, field) => {\n      const [newRules, isValidField] = checkPatternsValidity(\n        validationRules[field].filter(rule => rule.pattern),\n        value\n      )\n\n      if (isValidField) return null\n\n      const invalidRules = newRules.filter(rule => !rule.isValid)\n\n      return invalidRules.map(rule => ({ name: rule.name, label: rule.label }))\n    }\n\n    return disabled ? [null, null] : [validateField(key, 'key'), validateField(value, 'value')]\n  }\n\n  return (\n    <div className={chipsClassName} data-testid={`${name}-chips`}>\n      {label && <div className=\"chips__label\">{label}</div>}\n      <div className={label ? 'chips__wrapper' : ''}>\n        <FormChipCellView\n          chipOptions={chipOptions}\n          chips={chips}\n          editConfig={editConfig}\n          handleAddNewChip={handleAddNewChip}\n          handleEditChip={handleEditChip}\n          handleRemoveChip={handleRemoveChip}\n          handleShowElements={handleShowElements}\n          handleToEditMode={handleToEditMode}\n          isEditable={isEditable}\n          name={name}\n          ref={{ chipsCellRef, chipsWrapperRef, hiddenChipsCounterRef, hiddenChipsPopUpRef }}\n          setChipsSizes={setChipsSizes}\n          setEditConfig={setEditConfig}\n          shortChips={shortChips}\n          showChips={showChips}\n          showHiddenChips={showHiddenChips}\n          validateFields={validateFields}\n          validationRules={validationRules}\n        />\n      </div>\n    </div>\n  )\n}\n\nFormChipCell.propTypes = {\n  chipOptions: CHIP_OPTIONS,\n  className: PropTypes.string,\n  delimiter: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  formState: PropTypes.object.isRequired,\n  initialValues: PropTypes.object.isRequired,\n  isEditable: PropTypes.bool,\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  onExitEditModeCallback: PropTypes.func,\n  shortChips: PropTypes.bool,\n  validationRules: PropTypes.object,\n  validator: PropTypes.func,\n  visibleChipsMaxLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n}\n\nFormChipCell = React.memo(FormChipCell)\n\nexport default FormChipCell\n"],"names":["FormChipCell","chipOptions","className","delimiter","formState","initialValues","isEditable","label","name","onClick","shortChips","validationRules","validator","onExitEditModeCallback","visibleChipsMaxLength","chipsClassName","classnames","chipsCellRef","chipsWrapperRef","handleShowElements","hiddenChipsCounterRef","hiddenChipsPopUpRef","setChipsSizes","setShowHiddenChips","showChips","showHiddenChips","visibleChipsCount","useChipCell","editConfig","setEditConfig","useState","chips","useMemo","get","generateChipsList","checkChipsList","useCallback","currentChipsList","areArraysEqual","set","handleAddNewChip","event","fields","fieldsLength","_a","handleRemoveChip","chipIndex","isOutsideClick","lodash","_","index","handleEditChip","nameEvent","key","value","isChipNotEmpty","CLICK","TAB","prevState","lastChipSelected","TAB_SHIFT","firstChipIsSelected","handleToEditMode","keyName","pointerCoordinateX","pointerCoordinateY","isKeyClicked","isClickedInsideInputElement","inputElement","topPosition","leftPosition","rightPosition","bottomPosition","preState","validateFields","fieldsArray","errorData","uniquenessValidator","newValue","idx","isEmpty","chip","keyValidation","valueValidation","validateChip","uniquenessError","isNil","disabled","validateField","field","newRules","isValidField","checkPatternsValidity","rule","jsx","FormChipCellView","CHIP_OPTIONS","PropTypes","React","FormChipCell$1"],"mappings":"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"}