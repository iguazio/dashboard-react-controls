{"version":3,"file":"FormChipCell.mjs","sources":["../../../src/lib/components/FormChipCell/FormChipCell.jsx"],"sourcesContent":["/*\nCopyright 2022 Iguazio Systems Ltd.\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useState, useCallback, useMemo } from 'react'\nimport lodash, { get, isEmpty, set, isNil } from 'lodash'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport FormChipCellView from './FormChipCellView'\n\nimport { CHIP_OPTIONS } from '../../types'\nimport { CLICK, TAB, TAB_SHIFT } from '../../constants'\nimport { areArraysEqual } from '../../utils/common.util'\nimport { checkPatternsValidity } from '../../utils/validation.util'\nimport { generateChipsList } from '../../utils/generateChipsList.util'\nimport { uniquenessError } from './formChipCell.util'\nimport { useChipCell } from '../../hooks'\n\nimport './formChipCell.scss'\n\nconst FormChipCell = ({\n  chipOptions = {\n    background: 'purple',\n    boldValue: false,\n    borderRadius: 'primary',\n    borderColor: 'transparent',\n    density: 'dense',\n    font: 'purple'\n  },\n  className = '',\n  delimiter = null,\n  formState,\n  initialValues,\n  isEditable = false,\n  label = null,\n  name,\n  onClick = () => {},\n  shortChips = false,\n  validationRules = {},\n  validator = null,\n  onExitEditModeCallback = null,\n  visibleChipsMaxLength = null\n}) => {\n  const chipsClassName = classnames('chips', className)\n  const {\n    chipsCellRef,\n    chipsWrapperRef,\n    handleShowElements,\n    hiddenChipsCounterRef,\n    hiddenChipsPopUpRef,\n    setChipsSizes,\n    setShowHiddenChips,\n    showChips,\n    showHiddenChips,\n    visibleChipsCount\n  } = useChipCell(isEditable, visibleChipsMaxLength)\n\n  const [editConfig, setEditConfig] = useState({\n    chipIndex: null,\n    isEdit: false,\n    isKeyFocused: false,\n    isValueFocused: false,\n    isNewChip: false\n  })\n\n  let chips = useMemo(() => {\n    return isEditable || visibleChipsMaxLength === 'all'\n      ? {\n          visibleChips: get(formState.values, name),\n          hiddenChips: []\n        }\n      : generateChipsList(\n          get(formState.values, name),\n          visibleChipsMaxLength ? visibleChipsMaxLength : visibleChipsCount\n        )\n  }, [visibleChipsMaxLength, isEditable, visibleChipsCount, formState.values, name])\n\n  const checkChipsList = useCallback(\n    currentChipsList => {\n      if (areArraysEqual(get(initialValues, name), currentChipsList, ['id'])) {\n        set(formState.initialValues, name, currentChipsList)\n      }\n\n      formState.form.mutators.setFieldState(name, { modified: true })\n      formState.form.mutators.setFieldState(name, { touched: true })\n    },\n    [initialValues, name, formState]\n  )\n\n  const handleAddNewChip = useCallback(\n    (event, fields) => {\n      const fieldsLength = fields.value?.length || 0\n\n      if (!editConfig.isEdit && !editConfig.chipIndex) {\n        formState.form.mutators.push(name, {\n          id: fieldsLength + new Date(),\n          key: '',\n          value: '',\n          delimiter: delimiter\n        })\n      }\n\n      if (showHiddenChips) {\n        setShowHiddenChips(false)\n      }\n\n      setEditConfig({\n        chipIndex: fieldsLength,\n        isEdit: true,\n        isKeyFocused: true,\n        isValueFocused: false,\n        isNewChip: true\n      })\n\n      event && event.preventDefault()\n    },\n    [\n      editConfig.isEdit,\n      editConfig.chipIndex,\n      showHiddenChips,\n      formState.form.mutators,\n      name,\n      delimiter,\n      setShowHiddenChips\n    ]\n  )\n\n  const handleRemoveChip = useCallback(\n    (event, fields, chipIndex, isOutsideClick = false) => {\n      checkChipsList(\n        lodash\n          .chain(formState)\n          .get(['values', name])\n          .filter((_, index) => index !== chipIndex)\n          .value()\n      )\n      fields.remove(chipIndex)\n      onExitEditModeCallback && onExitEditModeCallback()\n      event && !isOutsideClick && event.stopPropagation()\n    },\n    [checkChipsList, formState, name, onExitEditModeCallback]\n  )\n\n  const handleEditChip = useCallback(\n    (event, fields, nameEvent, isOutsideClick) => {\n      const { key, value } = fields.value[editConfig.chipIndex]\n      const isChipNotEmpty = !!(key?.trim() && value?.trim())\n\n      if (nameEvent === CLICK) {\n        if (!isChipNotEmpty) {\n          handleRemoveChip(event, fields, editConfig.chipIndex, isOutsideClick)\n        }\n\n        setEditConfig({\n          chipIndex: null,\n          isEdit: false,\n          isKeyFocused: false,\n          isValueFocused: false,\n          isNewChip: false\n        })\n        isChipNotEmpty && onExitEditModeCallback && onExitEditModeCallback()\n      } else if (nameEvent === TAB) {\n        if (!isChipNotEmpty) {\n          handleRemoveChip(event, fields, editConfig.chipIndex)\n        }\n\n        setEditConfig(prevState => {\n          const lastChipSelected = prevState.chipIndex + 1 > fields.value.length - 1\n\n          isChipNotEmpty && lastChipSelected && onExitEditModeCallback && onExitEditModeCallback()\n\n          return {\n            chipIndex: lastChipSelected ? null : prevState.chipIndex + 1,\n            isEdit: !lastChipSelected,\n            isKeyFocused: !lastChipSelected,\n            isValueFocused: false,\n            isNewChip: false\n          }\n        })\n      } else if (nameEvent === TAB_SHIFT) {\n        if (!isChipNotEmpty) {\n          handleRemoveChip(event, fields, editConfig.chipIndex)\n        }\n\n        setEditConfig(prevState => {\n          const firstChipIsSelected = prevState.chipIndex === 0\n\n          isChipNotEmpty &&\n            firstChipIsSelected &&\n            onExitEditModeCallback &&\n            onExitEditModeCallback()\n\n          return {\n            chipIndex: firstChipIsSelected ? null : prevState.chipIndex - 1,\n            isEdit: !firstChipIsSelected,\n            isKeyFocused: false,\n            isValueFocused: !firstChipIsSelected,\n            isNewChip: false\n          }\n        })\n      }\n\n      checkChipsList(get(formState.values, name))\n\n      if (\n        (editConfig.chipIndex > 0 && editConfig.chipIndex < fields.value.length - 1) ||\n        (fields.value.length > 1 && editConfig.chipIndex === 0 && nameEvent !== TAB_SHIFT) ||\n        (fields.value.length > 1 &&\n          editConfig.chipIndex === fields.value.length - 1 &&\n          nameEvent !== TAB)\n      ) {\n        event && event.preventDefault()\n      }\n    },\n    [\n      editConfig.chipIndex,\n      checkChipsList,\n      formState.values,\n      name,\n      onExitEditModeCallback,\n      handleRemoveChip\n    ]\n  )\n\n  const handleToEditMode = useCallback(\n    (event, chipIndex, keyName) => {\n      if (isEditable) {\n        const { clientX: pointerCoordinateX, clientY: pointerCoordinateY } = event\n        let isKeyClicked = false\n        const isClickedInsideInputElement = (\n          pointerCoordinateX,\n          pointerCoordinateY,\n          inputElement\n        ) => {\n          if (inputElement) {\n            const {\n              top: topPosition,\n              left: leftPosition,\n              right: rightPosition,\n              bottom: bottomPosition\n            } = inputElement.getBoundingClientRect()\n            if (pointerCoordinateX > rightPosition || pointerCoordinateX < leftPosition)\n              return false\n            if (pointerCoordinateY > bottomPosition || pointerCoordinateY < topPosition)\n              return false\n\n            return true\n          }\n        }\n        event.stopPropagation()\n\n        if (event.target.nodeName !== 'INPUT') {\n          if (event.target.firstElementChild) {\n            isKeyClicked = isClickedInsideInputElement(\n              pointerCoordinateX,\n              pointerCoordinateY,\n              event.target.firstElementChild\n            )\n          }\n        } else {\n          isKeyClicked = event.target.name === keyName\n        }\n\n        setEditConfig(preState => ({\n          ...preState,\n          chipIndex,\n          isEdit: true,\n          isKeyFocused: isKeyClicked,\n          isValueFocused: !isKeyClicked\n        }))\n      }\n\n      onClick && onClick()\n    },\n    [isEditable, onClick]\n  )\n\n  const validateFields = fieldsArray => {\n    if (!fieldsArray) return null\n\n    let errorData = []\n\n    const uniquenessValidator = (newValue, idx) => {\n      return !fieldsArray.some(({ key }, index) => {\n        return newValue === key && index !== idx\n      })\n    }\n\n    if (!isEmpty(validationRules)) {\n      errorData = fieldsArray.map(chip => {\n        const [keyValidation, valueValidation] = validateChip(chip)\n\n        if (keyValidation && valueValidation) return { key: keyValidation, value: valueValidation }\n\n        if (keyValidation) return { key: keyValidation }\n\n        if (valueValidation) return { value: valueValidation }\n\n        return null\n      })\n    }\n\n    // uniqueness\n    fieldsArray.forEach((chip, index) => {\n      const isUnique = uniquenessValidator(chip.key, index)\n\n      if (!isUnique) {\n        if (get(errorData, [index, 'key'], false)) {\n          errorData.at(index).key.push(uniquenessError)\n        } else {\n          set(errorData, [index, 'key'], [uniquenessError])\n        }\n      }\n    })\n\n    if (isEmpty(errorData) && validator) {\n      errorData = validator(fieldsArray)\n    }\n\n    if (errorData.every(label => isNil(label))) {\n      return null\n    }\n\n    return errorData\n  }\n\n  const validateChip = ({ key, value, disabled }) => {\n    const validateField = (value, field) => {\n      const [newRules, isValidField] = checkPatternsValidity(\n        validationRules[field].filter(rule => rule.pattern),\n        value\n      )\n\n      if (isValidField) return null\n\n      const invalidRules = newRules.filter(rule => !rule.isValid)\n\n      return invalidRules.map(rule => ({ name: rule.name, label: rule.label }))\n    }\n\n    return disabled ? [null, null] : [validateField(key, 'key'), validateField(value, 'value')]\n  }\n\n  return (\n    <div className={chipsClassName} data-testid={`${name}-chips`}>\n      {label && <div className=\"chips__label\">{label}</div>}\n      <div className={label ? 'chips__wrapper' : ''}>\n        <FormChipCellView\n          chipOptions={chipOptions}\n          chips={chips}\n          editConfig={editConfig}\n          handleAddNewChip={handleAddNewChip}\n          handleEditChip={handleEditChip}\n          handleRemoveChip={handleRemoveChip}\n          handleShowElements={handleShowElements}\n          handleToEditMode={handleToEditMode}\n          isEditable={isEditable}\n          name={name}\n          ref={{ chipsCellRef, chipsWrapperRef, hiddenChipsCounterRef, hiddenChipsPopUpRef }}\n          setChipsSizes={setChipsSizes}\n          setEditConfig={setEditConfig}\n          shortChips={shortChips}\n          showChips={showChips}\n          showHiddenChips={showHiddenChips}\n          validateFields={validateFields}\n          validationRules={validationRules}\n        />\n      </div>\n    </div>\n  )\n}\n\nFormChipCell.propTypes = {\n  chipOptions: CHIP_OPTIONS,\n  className: PropTypes.string,\n  delimiter: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  formState: PropTypes.object.isRequired,\n  initialValues: PropTypes.object.isRequired,\n  isEditable: PropTypes.bool,\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  onExitEditModeCallback: PropTypes.func,\n  shortChips: PropTypes.bool,\n  validationRules: PropTypes.object,\n  validator: PropTypes.func,\n  visibleChipsMaxLength: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n}\n\nexport default React.memo(FormChipCell)\n"],"names":["pointerCoordinateX","pointerCoordinateY","label","value","this","React"],"mappings":"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"}