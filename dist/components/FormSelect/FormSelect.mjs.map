{"version":3,"file":"FormSelect.mjs","sources":["../../../src/lib/components/FormSelect/FormSelect.jsx"],"sourcesContent":["/*\nCopyright 2022 Iguazio Systems Ltd.\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Field, useField } from 'react-final-form'\n\nimport ConfirmDialog from '../ConfirmDialog/ConfirmDialog'\nimport PopUpDialog from '../PopUpDialog/PopUpDialog'\nimport SelectOption from '../../elements/SelectOption/SelectOption'\nimport TextTooltipTemplate from '../TooltipTemplate/TextTooltipTemplate'\nimport Tooltip from '../Tooltip/Tooltip'\n\nimport { SELECT_OPTIONS } from '../../types'\nimport { TERTIARY_BUTTON } from '../../constants'\n\nimport Caret from '../../images/dropdown.svg?react'\n\nimport './formSelect.scss'\n\nconst FormSelect = ({\n  className = '',\n  density = 'normal',\n  disabled = false,\n  hideSelectedOption = false,\n  label = '',\n  multiple = false,\n  name,\n  onChange = null,\n  options,\n  preventWidthOverflow = false,\n  required = false,\n  scrollToView = true,\n  search = false,\n  selectedItemAction = null,\n  tooltip = '',\n  withSelectedIcon = true,\n  withoutBorder = false\n}) => {\n  const { input, meta } = useField(name)\n  const [isInvalid, setIsInvalid] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [isOpen, setIsOpen] = useState(false)\n  const [searchValue, setSearchValue] = useState('')\n  const optionsListRef = useRef()\n  const popUpRef = useRef()\n  const selectRef = useRef()\n  const searchRef = useRef()\n  const { width: selectWidth } = selectRef?.current?.getBoundingClientRect() || {}\n\n  const selectWrapperClassNames = classNames(\n    'form-field__wrapper',\n    `form-field__wrapper-${density}`,\n    disabled && 'form-field__wrapper-disabled',\n    isOpen && 'form-field__wrapper-active',\n    isInvalid && 'form-field__wrapper-invalid',\n    withoutBorder && 'without-border'\n  )\n\n  const selectLabelClassName = classNames(\n    'form-field__label',\n    disabled && 'form-field__label-disabled'\n  )\n\n  const selectValueClassName = classNames(\n    'form-field__select-value',\n    !input.value && 'form-field__select-placeholder'\n  )\n\n  const selectedOption = options.find(option => option.id === input.value)\n\n  const getFilteredOptions = useCallback(\n    options => {\n      return options.filter(option => {\n        return !search || option.label.toLowerCase().includes(searchValue.toLowerCase())\n      })\n    },\n    [search, searchValue]\n  )\n\n  const sortedOptionsList = useMemo(() => {\n    if (scrollToView) {\n      return getFilteredOptions(options)\n    }\n\n    const optionsList = [...options]\n\n    const selectedOption = optionsList.filter((option, idx, arr) => {\n      if (option.id === input.value) {\n        arr.splice(idx, 1)\n        return true\n      }\n      return false\n    })\n\n    return getFilteredOptions([...selectedOption, ...optionsList])\n  }, [input.value, getFilteredOptions, options, scrollToView])\n\n  const getSelectValue = () => {\n    if (!input.value || !input.value.length) {\n      return `Select Option${multiple ? 's' : ''}`\n    }\n\n    const multipleValue =\n      multiple && input.value.includes('all') && input.value.length > 1\n        ? options\n            .filter(option => option.id !== 'all')\n            .filter(option => input.value.includes(option.id))\n            .map(option => option.label)\n            .join(', ')\n        : options\n            .filter(option => input.value.includes(option.id))\n            .map(option => option.label)\n            .join(', ')\n\n    return !multiple\n      ? selectedOption?.label\n      : input.value.length <= 2\n        ? multipleValue\n        : `${input.value.length} items selected`\n  }\n\n  useEffect(() => {\n    setIsInvalid(\n      meta.invalid && (meta.validating || meta.modified || (meta.submitFailed && meta.touched))\n    )\n  }, [meta.invalid, meta.modified, meta.submitFailed, meta.touched, meta.validating])\n\n  const openMenu = useCallback(() => {\n    if (!isOpen) {\n      setIsOpen(true)\n      input.onFocus(new Event('focus'))\n    }\n  }, [input, isOpen])\n\n  const closeMenu = useCallback(() => {\n    if (isOpen) {\n      setIsOpen(false)\n      input.onBlur(new Event('blur'))\n    }\n  }, [input, isOpen])\n\n  const clickHandler = useCallback(\n    event => {\n      if (selectRef.current !== event.target.closest('.form-field-select')) {\n        closeMenu()\n      }\n    },\n    [closeMenu]\n  )\n\n  const handleScroll = useCallback(\n    event => {\n      if (!event.target.closest('.options-list__body')) {\n        closeMenu()\n      }\n    },\n    [closeMenu]\n  )\n\n  useEffect(() => {\n    if (isOpen) {\n      window.addEventListener('scroll', handleScroll, true)\n    }\n\n    window.addEventListener('click', clickHandler)\n\n    return () => {\n      window.removeEventListener('click', clickHandler)\n      window.removeEventListener('scroll', handleScroll, true)\n    }\n  }, [clickHandler, handleScroll, isOpen])\n\n  const scrollOptionToView = useCallback(() => {\n    const selectedOptionEl = optionsListRef.current.querySelector(\n      `[data-custom-id=\"${input.value}\"]`\n    )\n\n    if (!selectedOptionEl) return\n\n    searchValue\n      ? optionsListRef.current.scrollTo({ top: 0, left: 0, behavior: 'smooth' })\n      : setTimeout(() => {\n          selectedOptionEl.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          })\n        }, 0)\n  }, [input.value, searchValue])\n\n  useEffect(() => {\n    if (isOpen && optionsListRef.current && scrollToView) {\n      scrollOptionToView()\n    }\n  }, [isOpen, scrollOptionToView, scrollToView])\n\n  useEffect(() => {\n    if (isOpen && search && searchRef.current) {\n      searchRef.current.focus()\n    }\n  }, [isOpen, search])\n\n  const toggleOpen = () => {\n    if (isOpen) {\n      closeMenu()\n    } else {\n      !disabled && openMenu()\n    }\n  }\n\n  const handleCloseSelectBody = useCallback(\n    event => {\n      event.stopPropagation()\n      if (multiple) return\n\n      if (\n        !event.target.classList.contains('disabled') &&\n        !event.target.closest('.options-list__search')\n      ) {\n        closeMenu()\n        setSearchValue('')\n      }\n    },\n    [closeMenu, multiple]\n  )\n\n  const handleSelectOptionClick = (selectedOption, option) => {\n    if (selectedOption !== input.value) {\n      option.handler && option.handler()\n      onChange && onChange(selectedOption)\n\n      setTimeout(() => {\n        input.onChange(selectedOption)\n      })\n    }\n  }\n\n  const validateField = value => {\n    if (required) {\n      return value ? undefined : 'Required'\n    }\n  }\n\n  return (\n    <Field name={name} validate={validateField}>\n      {({ input, meta }) => (\n        <Tooltip\n          className=\"select-tooltip\"\n          template={<TextTooltipTemplate text={tooltip} />}\n          hidden={!tooltip}\n        >\n          <div\n            data-testid={name ? `${name}-form-field-select` : 'form-field-select'}\n            ref={selectRef}\n            className={`form-field-select ${className}`}\n            onClick={toggleOpen}\n          >\n            {label && (\n              <div className={selectLabelClassName}>\n                <label data-testid={name ? `${name}-form-select-label` : 'form-select-label'}>\n                  {label}\n                  {meta.error && <span className=\"form-field__label-mandatory\"> *</span>}\n                </label>\n              </div>\n            )}\n            <div data-testid=\"select-header\" className={selectWrapperClassNames}>\n              <div className=\"form-field__control\">\n                {!hideSelectedOption && (\n                  <div data-testid=\"selected-option\" className=\"form-field__select\">\n                    <span className={selectValueClassName}>{getSelectValue()}</span>\n                  </div>\n                )}\n              </div>\n              <div className=\"form-field__icons\">\n                {input.value && selectedItemAction && (\n                  <>\n                    {selectedItemAction.handler ? (\n                      <Tooltip template={<TextTooltipTemplate text={selectedItemAction.tooltip} />}>\n                        <button\n                          onClick={event => {\n                            if (selectedItemAction.confirm) {\n                              setConfirmDialogOpen(true)\n                            } else {\n                              selectedItemAction.handler(input.value)\n                            }\n\n                            event.stopPropagation()\n                          }}\n                        >\n                          {selectedItemAction.icon}\n                        </button>\n                      </Tooltip>\n                    ) : (\n                      <span>{selectedItemAction.icon}</span>\n                    )}\n                  </>\n                )}\n                <span>\n                  <Caret className=\"form-field__caret\" />\n                </span>\n              </div>\n            </div>\n            {isConfirmDialogOpen && (\n              <ConfirmDialog\n                cancelButton={{\n                  handler: () => {\n                    setConfirmDialogOpen(false)\n                  },\n                  label: 'Cancel',\n                  variant: TERTIARY_BUTTON\n                }}\n                closePopUp={() => {\n                  setConfirmDialogOpen(false)\n                }}\n                confirmButton={{\n                  handler: () => {\n                    selectedItemAction.handler(input.value)\n                    setConfirmDialogOpen(false)\n                  },\n                  label: selectedItemAction.confirm.btnConfirmLabel,\n                  variant: selectedItemAction.confirm.btnConfirmType\n                }}\n                header={selectedItemAction.confirm.title}\n                isOpen={isConfirmDialogOpen}\n                message={selectedItemAction.confirm.message}\n              />\n            )}\n            {isOpen && (\n              <PopUpDialog\n                className=\"form-field form-field-select__options-list\"\n                headerIsHidden\n                ref={popUpRef}\n                customPosition={{\n                  element: selectRef,\n                  position: 'bottom-right',\n                  autoHorizontalPosition: true\n                }}\n                style={{\n                  maxWidth: `${selectWidth < 500 && !preventWidthOverflow ? 500 : selectWidth}px`,\n                  minWidth: `${selectWidth}px`\n                }}\n              >\n                <div\n                  data-testid=\"select-body\"\n                  className=\"options-list__body\"\n                  onClick={handleCloseSelectBody}\n                >\n                  {search && (\n                    <div className=\"options-list__search\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Search...\"\n                        value={searchValue}\n                        onChange={event => setSearchValue(event.target.value)}\n                        ref={searchRef}\n                        autoFocus\n                      />\n                    </div>\n                  )}\n                  <ul className=\"options-list\" ref={optionsListRef}>\n                    {sortedOptionsList.map(option => {\n                      return (\n                        <SelectOption\n                          item={option}\n                          key={option.id}\n                          name={name}\n                          onClick={selectedOption => {\n                            handleSelectOptionClick(selectedOption, option)\n                          }}\n                          multiple={multiple}\n                          selectedId={!multiple ? input.value : ''}\n                          withSelectedIcon={withSelectedIcon}\n                        />\n                      )\n                    })}\n                  </ul>\n                </div>\n              </PopUpDialog>\n            )}\n            <input {...input} type=\"hidden\" />\n          </div>\n        </Tooltip>\n      )}\n    </Field>\n  )\n}\n\nFormSelect.propTypes = {\n  className: PropTypes.string,\n  density: PropTypes.oneOf(['dense', 'normal', 'medium', 'chunky']),\n  disabled: PropTypes.bool,\n  hideSelectedOption: PropTypes.bool,\n  label: PropTypes.string,\n  multiple: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  options: SELECT_OPTIONS.isRequired,\n  preventWidthOverflow: PropTypes.bool,\n  required: PropTypes.bool,\n  scrollToView: PropTypes.bool,\n  search: PropTypes.bool,\n  selectedItemAction: PropTypes.object,\n  tooltip: PropTypes.string,\n  withSelectedIcon: PropTypes.bool,\n  withoutBorder: PropTypes.bool\n}\n\nexport default React.memo(FormSelect)\n"],"names":["classNames","options","selectedOption","input","meta","Caret","React"],"mappings":"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"}