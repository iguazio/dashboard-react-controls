{"version":3,"file":"TableCell.mjs","sources":["../../../src/lib/components/TableCell/TableCell.jsx"],"sourcesContent":["/*\nCopyright 2019 Iguazio Systems Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { cloneElement } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nimport ChipCell from '../ChipCell/ChipCell'\nimport TableLinkCell from '../../elements/TableLinkCell/TableLinkCell'\nimport TableTypeCell from '../../elements/TableTypeCell/TableTypeCell'\nimport TextTooltipTemplate from '../TooltipTemplate/TextTooltipTemplate'\nimport Tooltip from '../Tooltip/Tooltip'\n\nimport { getChipOptions } from '../../utils/chips.util'\nimport { truncateUid } from '../../utils/string.util'\n\nimport Arrow from '../../images/arrow.svg?react'\n\nconst TableCell = ({\n  cellData,\n  className = '',\n  firstCell = false,\n  item,\n  link = '',\n  onClick = null,\n  selectItem = () => {},\n  selectedItem = {},\n  showExpandButton = false,\n  toggleRow = null\n}) => {\n  const { value: stateValue, label: stateLabel, className: stateClassName } = item.state ?? {}\n  const cellClassNames = classnames(\n    'table-body__cell',\n    cellData.className,\n    className,\n    cellData.bodyCellClassName,\n    onClick && 'link'\n  )\n\n  if (cellData.template) {\n    return cloneElement(cellData.template, {\n      className\n    })\n  } else if (link && cellData.type !== 'hidden') {\n    return (\n      <TableLinkCell\n        className={className}\n        cellData={cellData}\n        item={item}\n        link={link}\n        selectItem={selectItem}\n        selectedItem={selectedItem}\n        showExpandButton={showExpandButton}\n        toggleRow={toggleRow}\n      />\n    )\n  } else if (firstCell && !link) {\n    return (\n      <td\n        onClick={() => cellData.value && onClick && onClick(cellData.value)}\n        className={cellClassNames}\n      >\n        <div className=\"data-ellipsis\">\n          {cellData && (\n            <Tooltip\n              template={<TextTooltipTemplate text={cellData.tooltip || cellData.value || ''} />}\n            >\n              {cellData.value}\n            </Tooltip>\n          )}\n        </div>\n        {item.state && stateValue && stateLabel && (\n          <Tooltip className=\"status\" template={<TextTooltipTemplate text={stateLabel} />}>\n            <i className={stateClassName} />\n          </Tooltip>\n        )}\n        {!item.state && item.status && (\n          <Tooltip className=\"status\" template={<TextTooltipTemplate text={item.status} />}>\n            <i className={`${item.status[0].toLowerCase()}${item.status.slice(1)}`} />\n          </Tooltip>\n        )}\n        {showExpandButton && (\n          <Arrow onClick={e => toggleRow && toggleRow(e, item)} className=\"expand-arrow\" />\n        )}\n      </td>\n    )\n  } else if (cellData.type === 'type') {\n    return <TableTypeCell className={className} cellData={cellData} />\n  } else if (cellData.type === 'icons') {\n    return (\n      <td data-testid={cellData.headerId} className={cellClassNames}>\n        {cellData.value.map((valueItem, index) => (\n          <Tooltip\n            key={valueItem.tooltip + index}\n            template={<TextTooltipTemplate text={valueItem.tooltip} />}\n          >\n            {valueItem.icon}\n          </Tooltip>\n        ))}\n      </td>\n    )\n  } else if (Array.isArray(cellData.value)) {\n    return (\n      <td data-testid={cellData.headerId} className={cellClassNames}>\n        <ChipCell chipOptions={getChipOptions(cellData.type)} elements={cellData.value} tooltip />\n      </td>\n    )\n  } else if (cellData.type === 'hash') {\n    return (\n      <td data-testid={cellData.headerId} className={cellClassNames}>\n        <Tooltip template={<TextTooltipTemplate text={cellData.value} />}>\n          <span>{truncateUid(cellData.value)}</span>\n        </Tooltip>\n      </td>\n    )\n  } else if (cellData.type === 'hidden') {\n    return null\n  } else if (cellData.type === 'component') {\n    return (\n      <td data-testid={cellData.headerId} className={cellClassNames}>\n        {cellData.value}\n      </td>\n    )\n  } else {\n    return (\n      <td\n        data-testid={cellData?.headerId}\n        className={cellClassNames}\n        onClick={() => cellData.value && onClick && onClick(cellData.value)}\n      >\n        <Tooltip\n          className=\"text_small\"\n          template={<TextTooltipTemplate text={cellData.tooltip || cellData.value || ''} />}\n        >\n          {cellData.value}\n        </Tooltip>\n      </td>\n    )\n  }\n}\n\nTableCell.propTypes = {\n  cellData: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  firstCell: PropTypes.bool,\n  item: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  link: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  onClick: PropTypes.func,\n  selectItem: PropTypes.func,\n  selectedItem: PropTypes.object,\n  showExpandButton: PropTypes.bool,\n  toggleRow: PropTypes.func\n}\n\nexport default TableCell\n"],"names":["TableCell","cellData","className","firstCell","item","link","onClick","selectItem","selectedItem","showExpandButton","toggleRow","stateValue","stateLabel","stateClassName","cellClassNames","classnames","cloneElement","jsx","TableLinkCell","jsxs","Tooltip","TextTooltipTemplate","Arrow","e","TableTypeCell","valueItem","index","ChipCell","getChipOptions","PropTypes"],"mappings":"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"}