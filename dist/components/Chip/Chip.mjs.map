{"version":3,"file":"Chip.mjs","sources":["../../../src/lib/components/Chip/Chip.jsx"],"sourcesContent":["/*\nCopyright 2019 Iguazio Systems Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport React, { useCallback, useEffect, useLayoutEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport { isEmpty } from 'lodash'\n\nimport ChipForm from '../ChipForm/ChipForm'\n\nimport { getChipLabelAndValue } from '../../utils/chips.util'\nimport { CHIP_OPTIONS, CHIP } from '../../types'\n\nimport Close from '../../images/close.svg?react'\n\nimport './chip.scss'\n\nlet Chip = (\n  {\n    chip,\n    chipIndex = null,\n    chipOptions,\n    className,\n    editConfig = {},\n    handleEditChip = () => {},\n    handleIsEdit = () => {},\n    handleRemoveChip = () => {},\n    hiddenChips = false,\n    isDeleteMode = false,\n    isEditMode = false,\n    onClick = null,\n    setChipsSizes = () => {},\n    setEditConfig = () => {},\n    setValidation = null,\n    shortChip = false,\n    showChips,\n    textOverflowEllipsis = false\n  },\n  { chipsCellRef, hiddenChipsCounterRef }\n) => {\n  const [validationRules, setValidationRules] = useState([])\n  const frontendSpec = useSelector(store => store.appStore?.frontendSpec) ?? {}\n  const chipRef = React.useRef()\n  const { chipLabel, chipValue } = getChipLabelAndValue(chip)\n  const { background, boldValue, borderColor, density, font, borderRadius } = chipOptions\n\n  const chipClassNames = classnames(\n    'chip',\n    'chip__content',\n    (textOverflowEllipsis || isEditMode) && 'data-ellipsis',\n    shortChip && 'chip_short',\n    hiddenChips && 'chip_hidden',\n    density && `chip-density_${density}`,\n    borderRadius && `chip-border_${borderRadius}`,\n    background && `chip-background_${background}`,\n    borderColor && `chip-border_${borderColor}`,\n    font && `chip-font_${font}`,\n    isEditMode && 'editable',\n    (showChips || isEditMode) && 'chip_visible',\n    className\n  )\n  const chipLabelClassNames = classnames(\n    'chip__label',\n    (textOverflowEllipsis || isEditMode) && 'data-ellipsis',\n    !isEmpty(validationRules) && 'chip__label_invalid'\n  )\n  const chipValueClassNames = classnames(\n    'chip__value',\n    (textOverflowEllipsis || isEditMode) && 'data-ellipsis',\n    boldValue && 'chip-value_bold'\n  )\n\n  const checkValidation = useCallback(\n    chipKey => {\n      if (frontendSpec.internal_labels?.includes(chipKey)) {\n        setValidationRules([\n          { name: 'internal label', label: 'System-defined labels cannot be modified.' }\n        ])\n\n        return setValidation && setValidation(false)\n      }\n\n      setValidationRules([])\n      setValidation && setValidation(true)\n    },\n    [frontendSpec.internal_labels, setValidation]\n  )\n\n  useEffect(() => {\n    if (setValidation) {\n      checkValidation(chip.value.match(/^(?<key>|.+?):\\s?(?<value>|.+?)$/)?.groups?.key)\n    }\n  }, [checkValidation, chip, setValidation])\n\n  useLayoutEffect(() => {\n    if (chipRef.current && setChipsSizes) {\n      const { marginLeft, marginRight } = getComputedStyle(chipRef.current)\n\n      setChipsSizes(state => ({\n        ...state,\n        [chipIndex]:\n          (chipRef.current?.getBoundingClientRect?.()?.width ?? 0) +\n          parseFloat(marginLeft) +\n          parseFloat(marginRight)\n      }))\n    }\n  }, [chipIndex, setChipsSizes])\n\n  if (!chip.value.match(/^\\+ [\\d]+/g)) {\n    return isEditMode && chipIndex === editConfig.chipIndex ? (\n      <ChipForm\n        chipOptions={chipOptions}\n        className=\"input-label-key\"\n        editConfig={editConfig}\n        key={chip.value}\n        onChange={handleEditChip}\n        ref={chipsCellRef}\n        setEditConfig={setEditConfig}\n        value={chip.value.match(/^(?<key>|.+?):\\s?(?<value>|.+?)$/)?.groups}\n        validationRules={validationRules}\n        checkValidation={checkValidation}\n      />\n    ) : (\n      <div\n        className={chipClassNames}\n        ref={chipRef}\n        onClick={event => handleIsEdit(event, chipIndex)}\n      >\n        {chipLabel && <div className={chipLabelClassNames}>{chipLabel}</div>}\n        {chipValue && (\n          <>\n            <div className=\"chip__delimiter\">{chip.delimiter ?? ':'}</div>\n            <div className={chipValueClassNames}>{chipValue}</div>\n          </>\n        )}\n        {(isEditMode || isDeleteMode) && (\n          <button className=\"item-icon-close\" onClick={event => handleRemoveChip(event, chipIndex)}>\n            <Close />\n          </button>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <span\n      className={`${chipClassNames} chips_button`}\n      onClick={onClick}\n      ref={hiddenChipsCounterRef}\n    >\n      {chip.value}\n    </span>\n  )\n}\n\nChip = React.forwardRef(Chip)\n\nChip.displayName = 'Chip'\n\nChip.propTypes = {\n  chip: CHIP.isRequired,\n  chipIndex: PropTypes.number,\n  chipOptions: CHIP_OPTIONS.isRequired,\n  className: PropTypes.string,\n  editConfig: PropTypes.object,\n  handleEditChip: PropTypes.func,\n  handleIsEdit: PropTypes.func,\n  handleRemoveChip: PropTypes.func,\n  hiddenChips: PropTypes.bool,\n  isDeleteMode: PropTypes.bool,\n  isEditMode: PropTypes.bool,\n  onClick: PropTypes.func,\n  setChipsSizes: PropTypes.func,\n  setEditConfig: PropTypes.func,\n  setValidation: PropTypes.func,\n  shortChip: PropTypes.bool,\n  showChips: PropTypes.bool.isRequired,\n  textOverflowEllipsis: PropTypes.bool\n}\n\nexport default React.memo(Chip)\n"],"names":["Chip","chip","chipIndex","chipOptions","className","editConfig","handleEditChip","handleIsEdit","handleRemoveChip","hiddenChips","isDeleteMode","isEditMode","onClick","setChipsSizes","setEditConfig","setValidation","shortChip","showChips","textOverflowEllipsis","chipsCellRef","hiddenChipsCounterRef","validationRules","setValidationRules","useState","frontendSpec","useSelector","store","_a","chipRef","React","chipLabel","chipValue","getChipLabelAndValue","background","boldValue","borderColor","density","font","borderRadius","chipClassNames","classnames","chipLabelClassNames","isEmpty","chipValueClassNames","checkValidation","useCallback","chipKey","useEffect","_b","useLayoutEffect","marginLeft","marginRight","state","_c","jsx","ChipForm","jsxs","event","Fragment","Close","CHIP","PropTypes","CHIP_OPTIONS","Chip$1"],"mappings":"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"}