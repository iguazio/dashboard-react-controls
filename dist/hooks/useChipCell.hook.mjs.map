{"version":3,"file":"useChipCell.hook.mjs","sources":["../../src/lib/hooks/useChipCell.hook.js"],"sourcesContent":["/*\nCopyright 2019 Iguazio Systems Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\") with\nan addition restriction as set forth herein. You may not use this\nfile except in compliance with the License. You may obtain a copy of\nthe License at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n\nIn addition, you may not use the software for any purposes that are\nillegal under applicable law, and the grant of the foregoing license\nunder the Apache 2.0 license is conditioned upon your compliance with\nsuch restriction.\n*/\nimport { useCallback, useEffect, useMemo, useRef, useState, useLayoutEffect } from 'react'\nimport { throttle } from 'lodash'\n\nimport { getTransitionEndEventName, isEveryObjectValueEmpty } from '../utils/common.util'\nimport { getFirstScrollableParent } from '../utils/getFirstScrollableParent.util'\n\nexport const useChipCell = (isEditMode, visibleChipsMaxLength) => {\n  const [showHiddenChips, setShowHiddenChips] = useState(false)\n  const [chipsSizes, setChipsSizes] = useState({})\n  const [showChips, setShowChips] = useState(false)\n  const [visibleChipsCount, setVisibleChipsCount] = useState(8)\n\n  const transitionEndEventName = useMemo(() => getTransitionEndEventName(), [])\n\n  const chipsCellRef = useRef()\n  const chipsWrapperRef = useRef()\n  const hiddenChipsCounterRef = useRef()\n  const hiddenChipsPopUpRef = useRef()\n\n  const handleShowElements = useCallback(\n    event => {\n      if (!isEditMode || (isEditMode && visibleChipsMaxLength)) {\n        if (hiddenChipsCounterRef.current?.contains(event.target) && !showHiddenChips) {\n          setShowHiddenChips(true)\n        } else {\n          setShowHiddenChips(false)\n        }\n      }\n\n      event && hiddenChipsCounterRef.current?.contains(event.target) && event.stopPropagation()\n    },\n    [isEditMode, showHiddenChips, visibleChipsMaxLength]\n  )\n\n  useEffect(() => {\n    if (showHiddenChips) {\n      window.addEventListener('click', handleShowElements, true)\n    }\n\n    return () => window.removeEventListener('click', handleShowElements, true)\n  }, [showHiddenChips, handleShowElements])\n\n  const handleScroll = useCallback(\n    event => {\n      if (event.target.parentElement !== hiddenChipsPopUpRef?.current) {\n        setShowHiddenChips(false)\n      }\n    },\n    [hiddenChipsPopUpRef]\n  )\n\n  useEffect(() => {\n    if (showHiddenChips) {\n      window.addEventListener('scroll', handleScroll, true)\n    }\n\n    return () => window.removeEventListener('scroll', handleScroll, true)\n  }, [handleScroll, showHiddenChips])\n\n  const resizeChipCell = useCallback(() => {\n    if (hiddenChipsPopUpRef?.current) {\n      const scrollableParent = getFirstScrollableParent(hiddenChipsCounterRef.current.offsetParent)\n      const scrollableParentRect = scrollableParent.getBoundingClientRect()\n      const hiddenChipsCounterRect = hiddenChipsCounterRef.current?.getBoundingClientRect()\n\n      // Check if the hiddenChipsCounterRect is outside the boundaries of the scrollableParentRect or the window\n      if (\n        hiddenChipsCounterRect.left < scrollableParentRect.left ||\n        hiddenChipsCounterRect.top < scrollableParentRect.top ||\n        hiddenChipsCounterRect.right > scrollableParentRect.right ||\n        hiddenChipsCounterRect.bottom > scrollableParentRect.bottom ||\n        hiddenChipsCounterRect.right > window.innerWidth ||\n        hiddenChipsCounterRect.bottom > window.innerHeight\n      ) {\n        setShowHiddenChips(false)\n      }\n    }\n\n    if (!isEditMode && !isEveryObjectValueEmpty(chipsSizes)) {\n      const parentSize = chipsCellRef.current?.getBoundingClientRect().width\n\n      let maxLength = 0\n      let chipIndex = 0\n      const padding = 65\n\n      Object.values(chipsSizes).every((chipSize, index) => {\n        // Check if adding chipSize to maxLength exceeds parentSize\n        // or if adding chipSize and padding exceeds parentSize when there are multiple chips\n        if (\n          maxLength + chipSize > parentSize ||\n          (Object.values(chipsSizes).length > 1 && maxLength + chipSize + padding > parentSize)\n        ) {\n          chipIndex = index\n\n          return false\n        } else {\n          maxLength += chipSize\n\n          if (index === Object.values(chipsSizes).length - 1) {\n            chipIndex = 8\n          }\n\n          return true\n        }\n      })\n\n      setVisibleChipsCount(chipIndex)\n      setShowChips(true)\n    }\n  }, [chipsSizes, isEditMode])\n\n  useLayoutEffect(() => {\n    resizeChipCell()\n  }, [resizeChipCell])\n\n  useEffect(() => {\n    const resizeChipCellDebounced = throttle(resizeChipCell, 500)\n\n    if (!isEditMode) {\n      window.addEventListener('resize', resizeChipCellDebounced)\n      window.addEventListener(transitionEndEventName, resizeChipCellDebounced)\n\n      return () => {\n        window.removeEventListener('resize', resizeChipCellDebounced)\n        window.removeEventListener(transitionEndEventName, resizeChipCellDebounced)\n      }\n    }\n  }, [resizeChipCell, isEditMode, transitionEndEventName])\n\n  return {\n    chipsCellRef,\n    chipsWrapperRef,\n    handleShowElements,\n    hiddenChipsCounterRef,\n    hiddenChipsPopUpRef,\n    setChipsSizes,\n    setShowHiddenChips,\n    showChips,\n    showHiddenChips,\n    visibleChipsCount\n  }\n}\n"],"names":["useChipCell","isEditMode","visibleChipsMaxLength","showHiddenChips","setShowHiddenChips","useState","chipsSizes","setChipsSizes","showChips","setShowChips","visibleChipsCount","setVisibleChipsCount","transitionEndEventName","useMemo","getTransitionEndEventName","chipsCellRef","useRef","chipsWrapperRef","hiddenChipsCounterRef","hiddenChipsPopUpRef","handleShowElements","useCallback","event","_a","_b","useEffect","handleScroll","resizeChipCell","scrollableParentRect","getFirstScrollableParent","hiddenChipsCounterRect","isEveryObjectValueEmpty","parentSize","maxLength","chipIndex","padding","chipSize","index","useLayoutEffect","resizeChipCellDebounced","throttle"],"mappings":"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"}